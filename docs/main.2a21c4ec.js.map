{"version":3,"sources":["main.js"],"names":["_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","value","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","return","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","catch","_catch","delegateYield","asyncGeneratorStep","_asyncToGenerator","arguments","apply","_next","_throw","_callee2","params","parameter","adapter","_adapter$limits","maxBufferSize","maxStorageBufferBindingSize","device","canvas","width","height","ctx","widthLength","NUM_LINES","LINE_BUFFER_COUNT","LINE_BUFFER_SIZE","x1","y1","x2","y2","NUM_BALLS","BUFFER_SIZE","minRadius","maxRadius","spacing","nx","grid_size","GL_BUFFER_SIZE","GL_ATOMIC_BUFFER_SIZE","theta","maxContactParticleNumber","EF_BUFFER_SIZE","EF_INDEX_BUFFER_SIZE","fps","dt","offsetX","offsetY","zoomValue","colorMode","isDragging","lastMouseX","lastMouseY","enableLineCheckbox","overlayCanvas","modeRadioId","modeRadioVabs","startButton","resetButton","stopButton","resetViewButton","initializeSceneBuffer","inputBalls","initializeInputBallsBuffer","initializeInputLinesBuffer","canvasFormat","fatal","module","bindGroupLayout1","bindGroupLayout2","pipeline","scene","input","output","ef_input","ef_index_input","gl_input","gl_output","gl_atomic","line_input","line_output","bindGroup1","bindGroup2","cellShaderModule","createCircleVertices","vertices","vertexBuffer","vertexBufferLayout","renderBindGroupLayout","renderBindGroup","renderPipelineLayout","cellPipeline","lineShaderModule","lineVertexBufferLayout","lineVertices","lineVertexBuffer","lineBindGroup","linePipeline","updateCompute","updateRender","initializeState","overlayCtx","drawFPS","changeColorMode","updateZoom","updateGrid","_updateGrid","animationId","lastTime","elapsedTime","frameDuration","animate","start","stopSimulation","resetSimulation","resetView","random","clamp","_callee2$","_context2","_clamp","min","max","Math","_random","b","_resetView","_resetSimulation","undefined","cancelAnimationFrame","console","log","_stopSimulation","_start","requestAnimationFrame","_animate","currentTime","deltaTime","actualFps","_updateGrid3","_callee","iteration","commandEncoder","_i4","commands","_callee$","_context","ceil","createCommandEncoder","clearBuffer","copyBufferToBuffer","queue","submit","counter","_updateGrid2","_x3","_updateZoom","writeBuffer","_changeColorMode","mode","_drawFPS","timeInSec","unit","clearRect","font","concat","fillStyle","text","toFixed","textWidth","measureText","x","fillText","fontSize","_initializeState","ef_inputBalls","Float32Array","ArrayBuffer","ef_index_inputBalls","Uint32Array","gl_inputBalls","gl_input_atomic","_updateRender","renderPassDescriptor","colorAttachments","view","getCurrentTexture","createView","loadOp","clearValue","storeOp","renderPassEncoder","beginRenderPass","setPipeline","setVertexBuffer","setBindGroup","draw","end","_updateCompute","dispatchSize","computePassEncoder","beginComputePass","dispatchWorkgroups","_createCircleVertices","centerX","centerY","radius","segments","theta1","PI","theta2","cos","sin","_fatal","msg","document","body","innerHTML","_initializeInputLines","inputLines","lineEnabled","checked","_initializeInputBalls","_initializeSceneBuffe","_parameter","def","has","parseFloat","get","URLSearchParams","location","search","navigator","gpu","requestAdapter","limits","requestDevice","requiredLimits","maxStorageBuffersPerShaderStage","getElementById","getContext","style","BYTES_PER_ELEMENT","pow","atan","sqrt","cursor","floor","getPreferredCanvasFormat","configure","format","createShaderModule","code","createBindGroupLayout","entries","binding","visibility","GPUShaderStage","COMPUTE","buffer","createComputePipeline","layout","createPipelineLayout","bindGroupLayouts","compute","entryPoint","createBuffer","size","usage","GPUBufferUsage","UNIFORM","COPY_DST","STORAGE","COPY_SRC","VERTEX","createBindGroup","resource","label","byteLength","arrayStride","attributes","offset","shaderLocation","createRenderPipeline","vertex","buffers","fragment","targets","primitive","topology","stripIndexFormat","addEventListener","event","rect","getBoundingClientRect","clientX","left","clientY","top","mouseX","mouseY","preventDefault","oldZoom","deltaY","ratio"],"mappings":"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","file":"main.2a21c4ec.js","sourceRoot":"..\\src","sourcesContent":["(async () => {\n\n  const params = new URLSearchParams(location.search);\n  // URLからパラメータを取得する。なければデフォルト値を代入(例:***?balls=16000&min_radius=0.015&max_radius=0.02)\n  function parameter(name, def) {\n    if (!params.has(name)) return def;\n    return parseFloat(params.get(name));\n  }\n  // GPUが使用可能化どうか\n  if (!(\"gpu\" in navigator)) fatal(\"WebGPU not supported. Please enable it in about:flags in Chrome or in about:config in Firefox.\");\n\n  // GPUの仕様を確認する\n  const adapter = await navigator.gpu.requestAdapter();\n  if (!adapter) fatal(\"Couldn’t request WebGPU adapter.\");\n  const { maxBufferSize, maxStorageBufferBindingSize } = adapter.limits;\n  // 最大バッファサイズの確認\n  console.log(\"maxBufferSize= \",maxBufferSize);\n  console.log(\"maxStorageBufferBindingSize= \",maxStorageBufferBindingSize);\n\n  // GPUの制限を変更する\n  const device = await adapter.requestDevice({\n    requiredLimits: {\n      maxStorageBuffersPerShaderStage: 10, // stragebufferの上限を引き上げる(エラー例:The number of storage buffers (12) in the Compute stage exceeds the maximum per-stage limit (10))\n    },\n  });\n  if (!device) fatal(\"Couldn’t request WebGPU device.\");\n  console.log(\"device limit= \",device.limits);\n\n  // canvas要素に関するパラメータ\n  const canvas = document.getElementById(\"webgpuCanvas\");//document.querySelector(\"canvas\"); // 描画するキャンバス要素\n  const width = parameter(\"width\", 1000); // キャンバスの幅(px)\n  const height = parameter(\"height\", 500); // キャンバスの高さ(px)\n  canvas.width = width; // キャンバスの幅(px)\n  canvas.height = height; // キャンバスの高さ(px)\n  const ctx = canvas.getContext(\"webgpu\"); // \"webgpu\"コンテキストを取得\n  // キャンバスのサイズ設定（属性とスタイル両方を設定）\n  canvas.style.width = width + 'px';\n  canvas.style.height = height + 'px';\n  const widthLength = parameter(\"width_length\", 36.0); // canvas要素のwidthに対する実際の長さ(m)\n\n  // 線分要素に関するパラメータ\n  const NUM_LINES = 1; //parameter(\"line\", 1); // 線分数\n  const LINE_BUFFER_COUNT = 10; // 線分に対する必要な要素(位置、速度、...)\n  const LINE_BUFFER_SIZE = NUM_LINES * LINE_BUFFER_COUNT * Float32Array.BYTES_PER_ELEMENT; // 線分の配列に必要なバッファサイズ\n  const x1 = parameter(\"x1\", 9.2); // canvas要素のwidthに対する実際の長さ(m)\n  const y1 = parameter(\"y1\", 0.0); // canvas要素のwidthに対する実際の長さ(m)\n  const x2 = parameter(\"x2\", 9.2); // canvas要素のwidthに対する実際の長さ(m)\n  const y2 = parameter(\"y2\", 16.0); // canvas要素のwidthに対する実際の長さ(m)\n\n  // 粒子要素に関するパラメータ\n  const NUM_BALLS = parameter(\"balls\", 10000); // 粒子数\n  const BUFFER_COUNT = 8; // 粒子に対する必要な要素(位置、速度、...)\n  const BUFFER_SIZE = NUM_BALLS * BUFFER_COUNT * Float32Array.BYTES_PER_ELEMENT; // 粒子の配列に必要なバッファサイズ\n  const minRadius = clamp(parameter(\"min_radius\", 0.02), 0.02, 0.1); // 最小粒子半径\n  const maxRadius = clamp(parameter(\"max_radius\", 0.04), minRadius, 0.1); // 最大粒子半径\n\n  // 粒子を格納する格子に関するパラメータ\n  const spacing = 2 * 2 * maxRadius + 0.001; // 格子間隔(最大直径の2倍は境界で処理がうまくできない場合があるので、少し余裕を持たせる\n  const nx = Math.ceil(widthLength / spacing); // x方向の格子点数\n  const grid_size = Math.ceil(spacing / (2 * minRadius)) ** 2; // 格子ごとのサイズ\n  const GL_BUFFER_SIZE = nx * Math.ceil(nx * ctx.canvas.height / ctx.canvas.width) * grid_size * Uint32Array.BYTES_PER_ELEMENT; // 粒子iが接触する粒子jのインデックスを格納する配列に必要なバッファサイズ\n  const GL_ATOMIC_BUFFER_SIZE = nx * Math.ceil(nx * ctx.canvas.height / ctx.canvas.width) * Uint32Array.BYTES_PER_ELEMENT; // 粒子iが接触する粒子の数を格納する配列に必要なバッファサイズ\n  \n  const theta = 2 * Math.atan(minRadius / Math.sqrt(((minRadius + maxRadius) ** 2 - minRadius ** 2))); // 最大粒子径に接触する2つの最小粒子の最大粒子の中心からの角度\n  const maxContactParticleNumber = Math.ceil(2 * Math.PI / theta); // 最大半径の粒子の周りに接触できる最小半径の粒子の数(一応切り上げる)(2次元)\n  const EF_BUFFER_SIZE = (NUM_BALLS * (maxContactParticleNumber + 4 + NUM_LINES)) * 2 * Float32Array.BYTES_PER_ELEMENT; // 接触力を保存する配列に必要なバッファサイズ。*2はxとy, ＋4は上下左右の壁の分\n  const EF_INDEX_BUFFER_SIZE = (NUM_BALLS * (maxContactParticleNumber)) * Uint32Array.BYTES_PER_ELEMENT; // 接触力の相手の粒子のインデックスを保存するためのバッファサイズ \n\n  // その他のパラメータ  \n  let fps = 30.0; // フレームレート\n  const dt = 5.0e-4\n  let offsetX = 0;  // ズーム(拡大・縮小)に関するパラメータ\n  let offsetY = 0;  // ズーム(拡大・縮小)に関するパラメータ\n  let zoomValue = 1.0; // ズーム(拡大・縮小)に関するパラメータ\n  let colorMode = 0;  // カラーモード\n\n  canvas.style.cursor = \"grab\"; // デフォルトを grab に設定\n  let isDragging = false; // マウスのドラッグ判定\n  let lastMouseX = 0; // マウスのgrab位置Xの保存用\n  let lastMouseY = 0; // マウスのgrab位置Yの保存用\n  \n  const enableLineCheckbox = document.getElementById(\"enableLine\"); // チェックボックス\n  const overlayCanvas = document.getElementById(\"overlayCanvas\"); // overlay 用キャンバス\n  const modeRadioId = document.getElementById(\"modeId\"); // ラジオボタン(粒子番号)\n  const modeRadioVabs = document.getElementById(\"modeVabs\"); // ラジオボタン(速度(絶対値))\n  const startButton = document.getElementById(\"start\"); // スタートボタン\n  const resetButton = document.getElementById(\"reset\"); // リセットボタン\n  const stopButton = document.getElementById(\"stop\"); // スタートボタン\n  const resetViewButton = document.getElementById(\"reset_view\"); // 描画リセットボタン\n\n  // sceneバッファの初期化処理(zoomValueやcolorModeはグローバル変数で変更されることがある)\n  function initializeSceneBuffer() {\n    return new Float32Array([\n      ctx.canvas.width,\n      ctx.canvas.height,\n      widthLength,\n      fps,\n      minRadius,\n      maxRadius,\n      nx,\n      grid_size,\n      spacing,\n      NUM_BALLS,\n      maxContactParticleNumber,\n      // offsetX, offsetY を追加\n      offsetX,\n      offsetY,\n      // 最後にズーム係数\n      zoomValue,\n      // カラーモード\n      colorMode,\n    ])\n  }\n\n  // 初期化用のバッファデータを用意(粒子半径はランダムであるため、読み込み時に固定する)\n  // 各粒子の初期値を定義\n  let inputBalls = new Float32Array(new ArrayBuffer(BUFFER_SIZE));\n  for (let i = 0; i < NUM_BALLS; i++) {\n    inputBalls[i * BUFFER_COUNT + 0] = random(minRadius, maxRadius); //radius;\n    inputBalls[i * BUFFER_COUNT + 2] = maxRadius + (i) % (widthLength / (maxRadius * 2 * 4)) * maxRadius * 2;//random(0, ctx.canvas.width);\n    inputBalls[i * BUFFER_COUNT + 3] = maxRadius + Math.floor((i) / (widthLength / (maxRadius * 2 * 4))) * maxRadius * 2;//random(0, ctx.canvas.height);\n    inputBalls[i * BUFFER_COUNT + 4] = 0;\n    inputBalls[i * BUFFER_COUNT + 5] = 0;\n    inputBalls[i * BUFFER_COUNT + 6] = 0.0;\n    inputBalls[i * BUFFER_COUNT + 7] = 0.0;\n  }\n  // 粒子要素の初期化処理\n  function initializeInputBallsBuffer(){\n    return inputBalls;\n  }\n\n  // 線分要素の初期化処理\n  function initializeInputLinesBuffer() {\n    // 線分要素の配列\n    let inputLines = new Float32Array(new ArrayBuffer(LINE_BUFFER_SIZE)); //32bitは4byteなので、4の整数倍のバイト数にする\n    // 初期値の代入\n    for (let i = 0; i < NUM_LINES; i++) {\n      inputLines[i * LINE_BUFFER_COUNT + 0] = maxRadius; // 線分の厚さ\n      inputLines[i * LINE_BUFFER_COUNT + 1] = 1; // 線分が有効かどうかのフラグ\n      inputLines[i * LINE_BUFFER_COUNT + 2] = x1; // x1\n      inputLines[i * LINE_BUFFER_COUNT + 3] = y1; // y1\n      inputLines[i * LINE_BUFFER_COUNT + 4] = x2; // x2\n      inputLines[i * LINE_BUFFER_COUNT + 5] = y2; // y2\n      inputLines[i * LINE_BUFFER_COUNT + 6] = 0;//random(-1000, 1000); // 重心の速度x\n      inputLines[i * LINE_BUFFER_COUNT + 7] = 0;//random(-1000, 1000); // 重心の速度y\n      inputLines[i * LINE_BUFFER_COUNT + 8] = 90.0; // angle:角度\n      inputLines[i * LINE_BUFFER_COUNT + 9] = 0.0; // angular_velocity:角速度\n    }\n\n\n    // 線分の初期状態をチェックボックスに合わせる\n    const lineEnabled = enableLineCheckbox.checked;\n    for (let i = 0; i < NUM_LINES; i++) {\n      inputLines[i * LINE_BUFFER_COUNT + 1] = lineEnabled ? 1 : 0;\n    }\n    return inputLines;\n  }\n\n  console.log(\"最大接触粒子数= \", maxContactParticleNumber);\n  console.log(\"最小粒子半径= \", minRadius);\n  console.log(\"最大粒子半径= \", maxRadius);\n  console.log(\"粒子数= \", NUM_BALLS);\n  // console.log(\"線分数=\", NUM_LINES);\n  // console.log(\"x方向の格子数= \", nx);\n  // console.log(\"格子間隔= \", spacing);\n  // console.log(\"格子ごとのサイズ= \", grid_size);\n  // console.log(\"BUFFER_SIZE= \", BUFFER_SIZE);\n  // console.log(\"EF_BUFFER_SIZE= \", EF_BUFFER_SIZE);\n  // console.log(\"GL_ATOMIC_BUFFER_SIZE= \", GL_ATOMIC_BUFFER_SIZE);\n  console.log(\"Max buffer size= \", device.limits.maxBufferSize);\n\n\n  // 推奨のcanvasフォーマットを取得\n  const canvasFormat = navigator.gpu.getPreferredCanvasFormat();\n  // コンテキストに関連付ける\n  ctx.configure({\n    device: device, // 前で作成したWebGPUデバイスをキャンバスに関連付け\n    format: canvasFormat, // 先ほど取得した最適なピクセルフォーマットを指定\n  });\n\n  // エラー内容の表示\n  function fatal(msg) {\n    document.body.innerHTML = `<pre>${msg}</pre>`;\n    throw Error(msg);\n  }\n\n\n  \n\n  const module = device.createShaderModule({\n    code: `\n    struct Ball {\n      radius: f32,\n      padding: f32,\n      position: vec2<f32>,\n      velocity: vec2<f32>,\n      angle: f32,\n      anguler_velocity: f32,\n    }\n\n    @group(0) @binding(0)\n    var<storage, read_write> input: array<Ball>;\n\n    @group(0) @binding(1)\n    var<storage, read_write> output: array<Ball>;\n\n    struct EF {\n      resilience_force: vec2<f32>,\n    }\n\n    @group(0) @binding(2)\n    var<storage, read_write> ef_input: array<EF>; // 復元力\n\n\n    struct Scene {\n      width: f32, // canvasの幅(pixel)\n      height: f32, // canvasの高さ(pixel)\n      L: f32, // canvasの幅(m)\n      fps: f32, // フレームレート\n      minRadius: f32, // 粒子の最小半径(m)\n      maxRadius: f32, // 粒子の最大半径(m)\n      nx: f32, // x方向の格子点数\n      grid_size: f32, // 1グリッドあたりの最大要素数\n      spacing: f32, // 格子間隔\n      numBalls: u32, // 粒子数\n      maxContactParticleNumber: f32, // 最大接触粒子数\n    }\n\n    @group(0) @binding(3)\n    var<uniform> scene: Scene;\n\n \n    @group(0) @binding(4)\n    var<storage, read_write> gl_input: array<u32>;\n\n    @group(0) @binding(5)\n    var<storage, read_write> gl_output: array<u32>;\n\n    @group(0) @binding(6)\n    var<storage, read_write> gl_atomic : array<atomic<u32>>;\n\n    @group(0) @binding(7)\n    var<storage, read_write> ef_index_input: array<u32>; // 復元力の相手粒子のインデックス\n\n\n    struct Line {\n      thickness: f32,\n      isValid: u32,\n      position_1: vec2<f32>,\n      position_2: vec2<f32>,\n      velocity: vec2<f32>,\n      angle: f32,\n      anguler_velocity: f32,\n    }\n\n    @group(1) @binding(0)\n    var<storage, read_write> line_input: array<Line>;\n\n    @group(1) @binding(1)\n    var<storage, read_write> line_output: array<Line>;\n\n\n\n    const PI: f32 = 3.14159;                        // 円周率\n    // const TIME_STEP: f32 = 0.0016;                   // 時間刻み(s)\n    const E: f32 = 70e+4;                           // ヤング率(kN/m2) 例:70e+9\n    const v: f32 = 0.35;                            // ポアソン比\n    const k_n: f32 = 9.0e+6; //PI*E*(1-v)/(4*(1+v)*(1-2*v));  // 法線方向ばね定数(kN/m)\n    const k_s: f32 = 3.0e+6; //PI*E/(8*(1+v));                // 接線方向ばね定数(kN/m)\n    const c: f32 = 0.0;                             // みかけの粘着力(kN/m2)\n    const fai: f32 = 30.0;                           // 摩擦角(°)\n    const g: f32 = -9.81;                           // 重力加速度(m/s2)\n    const rho: f32 = 2.5e+3;                        // 密度(kg/m3)\n    const e_n: f32 = 1.0;                           // 法線方向はね返り係数\n    const e_s: f32 = 1.0;                           // 接線方向はね返り係数\n    const h: f32 = 0.1;                           // 係数\n    const maxContactParticleNumber: u32 = ${maxContactParticleNumber};      // 最大接触粒子数(配列の要素数を固定するためここで定義する)\n    const maxLineNumber: u32 = ${NUM_LINES}; // 最大線分数\n    \n\n    // eta(粘性係数)を求める(対粒子)\n    fn calculationEta(m_i: f32, m_j: f32) -> vec2<f32> {\n      let m_ij = 2* m_i * m_j / (m_i + m_j);\n      // let eta_n = -2*log(e_n)*sqrt( ( m_ij * k_n ) / ( pow(PI, 2) + pow(log(e_n), 2) ) );\n      // let eta_s = -2*log(e_s)*sqrt( ( m_ij * k_s ) / ( pow(PI, 2) + pow(log(e_s), 2) ) );\n      let eta_n = h*2*sqrt(m_ij*k_n);\n      let eta_s = h*2*sqrt(m_ij*k_s);\n      return vec2<f32>(2.0e+3, 1.0e+3); //vec2<f32>(eta_n, eta_s);\n    }\n\n    // eta(粘性係数)を求める(対壁)\n    fn calculationEtaWithWall(m_i: f32) -> vec2<f32> {\n      let m_ij = m_i;\n      // let eta_n = -2*log(e_n)*sqrt( ( m_ij * k_n ) / ( pow(PI, 2) + pow(log(e_n), 2) ) );\n      // let eta_s = -2*log(e_s)*sqrt( ( m_ij * k_s ) / ( pow(PI, 2) + pow(log(e_s), 2) ) );\n      let eta_n = h*2*sqrt(m_ij*k_n);\n      let eta_s = h*2*sqrt(m_ij*k_s);\n      return vec2<f32>(2.0e+3, 1.0e+3); //vec2<f32>(eta_n, eta_s);\n    }\n\n    // 衝突後の粒子同士の相対速度を求める\n    fn calculationVelocityAfterCollision(position_i: vec2<f32>, velocity_i: vec2<f32>, anguler_velocity_i: f32, radius_i: f32, position_j: vec2<f32>, velocity_j: vec2<f32>, anguler_velocity_j: f32, radius_j: f32) -> vec2<f32> {\n      let lx = position_j.x - position_i.x;\n      let ly = position_j.y - position_i.y;\n      let ld = sqrt(lx * lx + ly * ly);\n      let cos_a_ji = lx/ld;\n      let sin_a_ji = ly/ld;\n      let u_ji_n =  (velocity_i.x - velocity_j.x) * cos_a_ji + (velocity_i.y - velocity_j.y) * sin_a_ji;\n      let u_ji_s = -(velocity_i.x - velocity_j.x) * sin_a_ji + (velocity_i.y - velocity_j.y) * cos_a_ji + radius_i * anguler_velocity_i + radius_j * anguler_velocity_j;\n      return vec2<f32>(u_ji_n, u_ji_s);\n    }\n\n    // 衝突後の粒子同士の相対速度を求める(対壁)\n    fn calculationVelocityAfterCollisionWithWall(velocity_i: vec2<f32>, anguler_velocity_i: f32, radius_i: f32, alpha: f32) -> vec2<f32> {\n      let cos_a_ji = cos(radians(alpha));\n      let sin_a_ji = sin(radians(alpha));\n      let u_ji_n =  (velocity_i.x) * cos_a_ji + (velocity_i.y) * sin_a_ji;\n      let u_ji_s = -(velocity_i.x) * sin_a_ji + (velocity_i.y) * cos_a_ji + radius_i * anguler_velocity_i;\n      return vec2<f32>(u_ji_n, u_ji_s);\n    }\n\n    // 衝突後の粒子同士の相対速度を求める(対線分)\n    fn calculationVelocityAfterCollisionWithStackLine(position_i: vec2<f32>, velocity_i: vec2<f32>, anguler_velocity_i: f32, radius_i: f32, position_j: vec2<f32>, velocity_j: vec2<f32>, anguler_velocity_j: f32, radius_j: f32) -> vec2<f32> {\n      let lx = position_j.x - position_i.x;\n      let ly = position_j.y - position_i.y;\n      let ld = sqrt(lx * lx + ly * ly);\n      let cos_a_ji = lx/ld;\n      let sin_a_ji = ly/ld;\n      let u_ji_n =  (velocity_i.x - velocity_j.x) * cos_a_ji + (velocity_i.y - velocity_j.y) * sin_a_ji;\n      let u_ji_s = -(velocity_i.x - velocity_j.x) * sin_a_ji + (velocity_i.y - velocity_j.y) * cos_a_ji + radius_i * anguler_velocity_i + radius_j * anguler_velocity_j;\n      return vec2<f32>(u_ji_n, u_ji_s);\n    }\n\n\n    // 復元力を求める(x,yはn,s)\n    fn calculationRestoringForceNS(resilience_force: vec2<f32>, u_ji: vec2<f32>, k_n: f32, k_s: f32, timeStep: f32) -> vec2<f32> {\n      return vec2<f32>(resilience_force.x + k_n * u_ji.x * timeStep, resilience_force.y + k_s * u_ji.y * timeStep);\n    }\n\n\n    // 粘性力を求める(x,yはn,s)\n    fn calculationViscousForceNS(eta_n: f32, eta_s: f32, u_ji_n: f32, u_ji_s: f32) -> vec2<f32> {\n      return vec2<f32>(eta_n*u_ji_n, eta_s*u_ji_s);\n    }\n\n\n    // 弾性力を求める(x,yはn,s)\n    fn calculationElasticForceNS(resilience_force: vec2<f32>, viscous_force: vec2<f32>) -> vec2<f32> {\n      // 法線方向\n      var f_ji_n: f32;\n      if(resilience_force.x >= 0){\n        f_ji_n = resilience_force.x + viscous_force.x;\n      }else{\n        f_ji_n = 0.0;\n      }\n      // 接線方向(個別要素法による粒状体の力学的挙動に関する解析的研究(その1)より)\n      var f_ji_s: f32;\n      if(resilience_force.x < 0){\n        f_ji_s = 0.0;\n      }else if(abs(resilience_force.y) > tan(radians(fai))*resilience_force.x + c){\n        f_ji_s = (tan(radians(fai))*resilience_force.x + c)*sign(resilience_force.y);\n      }else{\n        f_ji_s = resilience_force.y + viscous_force.y;\n      }\n      return vec2<f32>(f_ji_n, f_ji_s);\n    }\n\n    // 弾性力をxy成分に分解する(引数のx,yはn,s)\n    fn calculationElasticForceXY(f_ji: vec2<f32>, position_i: vec2<f32>, position_j: vec2<f32>) -> vec2<f32> {\n      let lx = position_j.x - position_i.x;\n      let ly = position_j.y - position_i.y;\n      let ld = sqrt(lx * lx + ly * ly);\n      let cos_a_ji = lx/ld;\n      let sin_a_ji = ly/ld;\n      let f_ji_x = -f_ji.x * cos_a_ji + f_ji.y * sin_a_ji;\n      let f_ji_y = -f_ji.x * sin_a_ji - f_ji.y * cos_a_ji;\n      return vec2<f32>(f_ji_x, f_ji_y);\n    }\n\n    // 弾性力をxy成分に分解する(対壁)\n    fn calculationElasticForceXYWithWall(f_ji: vec2<f32>, alpha: f32) -> vec2<f32> {\n      let cos_a_ji = cos(radians(alpha));\n      let sin_a_ji = sin(radians(alpha));\n      let f_ji_x = -f_ji.x * cos_a_ji + f_ji.y * sin_a_ji;\n      let f_ji_y = -f_ji.x * sin_a_ji - f_ji.y * cos_a_ji;\n      return vec2<f32>(f_ji_x, f_ji_y);\n    }\n\n    // 粒子の加速度を求める\n    fn calculationAcceleration(m_i: f32, F_i: f32, G_i: f32) -> vec2<f32> {\n      return vec2<f32>(F_i/m_i, G_i/m_i + g);\n    }\n\n    // 粒子の速度を求める\n    fn calculationVelocity(velocity: vec2<f32>, acceleration: vec2<f32>, timeStep: f32) -> vec2<f32> {\n      return vec2<f32>(velocity.x + acceleration.x * timeStep, velocity.y + acceleration.y * timeStep);\n    }\n\n    // 粒子の位置を求める\n    fn calculationPosition(position: vec2<f32>, velocity: vec2<f32>, timeStep: f32) -> vec2<f32> {\n      return vec2<f32>(position.x + velocity.x * timeStep, position.y + velocity.y * timeStep);\n    }\n\n    // 粒子の角加速度を求める\n    fn calculationAngularAcceleration(I_i: f32, T_i: f32) -> f32 {\n      return f32(T_i/I_i);\n    }\n\n    // 粒子の角速度を求める\n    fn calculationAngularVelocity(angular_velocity: f32, angular_acceleration: f32, timeStep: f32) -> f32 {\n      return f32(angular_velocity + angular_acceleration * timeStep);\n    }\n\n    // 粒子の角度を求める\n    fn calculationAngle(angle: f32, angular_velocity: f32, timeStep: f32) -> f32 {\n      return f32(angle + angular_velocity * timeStep);\n    }\n\n    // 粒子と線分の接触判定用\n    // 接触判定のためのベクトルACを算出する\n    fn calVectorAC(line: Line, position: vec2<f32>) -> vec2<f32>{\n      return position - line.position_1;\n    }\n\n    // t'を算出する\n    fn calTDash(line: Line, AC:vec2<f32>) -> f32 {\n      // 線分ABのベクトル\n      let AB = line.position_2 - line.position_1;\n      // tを算出((w・v)/(v・v))=((AC・AB)/(AB・AB))\n      let t = dot(AC,AB)/dot(AB,AB);\n      // tを0と1の間に限定する\n      return clamp(t, 0, 1);\n    }\n\n    // 接触判定のためのベクトルAD(接触点)を算出する\n    fn calVectorD(line: Line, tdash: f32) -> vec2<f32>{\n      // 線分ABのベクトル\n      let AB = line.position_2 - line.position_1;\n      return vec2<f32>(line.position_1.x + tdash * AB.x, line.position_1.y + tdash * AB.y);\n    }\n\n\n    // 左下のマスのインデックス(インデックス要素数は抜きにして考える)(0より小さい時のことはあとで考える)\n    fn cal_1_1_index(nx: u32, i: u32) -> i32 {\n      return i32(i-nx-1);\n    }\n    // 真下のマスのインデックス(インデックス要素数は抜きにして考える)(0より小さい時のことはあとで考える)\n    fn cal_2_1_index(nx: u32, i: u32) -> i32 {\n      return i32(i-nx);\n    }\n    // 右下のマスのインデックス(インデックス要素数は抜きにして考える)(0より小さい時のことはあとで考える)\n    fn cal_3_1_index(nx: u32, i: u32) -> i32 {\n      return i32(i-nx+1);\n    }\n    // 左のマスのインデックス(インデックス要素数は抜きにして考える)(0より小さい時のことはあとで考える)\n    fn cal_1_2_index(nx: u32, i: u32) -> i32 {\n      return i32(i-1);\n    }\n    // 真ん中のマスのインデックス(インデックス要素数は抜きにして考える)(0より小さい時のことはあとで考える)\n    fn cal_2_2_index(nx: u32, i: u32) -> i32 {\n      return i32(i);\n    }\n    // 右のマスのインデックス(インデックス要素数は抜きにして考える)(超えた時のことはあとで考える)\n    fn cal_3_2_index(nx: u32, i: u32) -> i32 {\n      return i32(i+1);\n    }\n    // 左上のマスのインデックス(インデックス要素数は抜きにして考える)(超えた時のことはあとで考える)\n    fn cal_1_3_index(nx: u32, i: u32) -> i32 {\n      return i32(i+nx-1);\n    }\n    // 真上のマスのインデックス(インデックス要素数は抜きにして考える)(超えた時のことはあとで考える)\n    fn cal_2_3_index(nx: u32, i: u32) -> i32 {\n      return i32(i+nx);\n    }\n    // 右上のマスのインデックス(インデックス要素数は抜きにして考える)(超えた時のことはあとで考える)\n    fn cal_3_3_index(nx: u32, i: u32) -> i32 {\n      return i32(i+nx+1);\n    }\n\n    fn calculationOtherBallIndexArray(nx: u32, i: u32) -> array<i32, 9> {\n      var other_index_array: array<i32, 9>; // 判定を行う相手のインデックスを格納する配列(自分自身と周りの8マス=9マス)\n      other_index_array[0] = cal_1_1_index(nx, i);\n      other_index_array[1] = cal_2_1_index(nx, i);\n      other_index_array[2] = cal_3_1_index(nx, i);\n      other_index_array[3] = cal_1_2_index(nx, i);\n      other_index_array[4] = cal_2_2_index(nx, i);\n      other_index_array[5] = cal_3_2_index(nx, i);\n      other_index_array[6] = cal_1_3_index(nx, i);\n      other_index_array[7] = cal_2_3_index(nx, i);\n      other_index_array[8] = cal_3_3_index(nx, i);\n      return other_index_array;\n    }\n\n    @compute @workgroup_size(64)\n    fn main(\n      @builtin(global_invocation_id)\n      global_id : vec3<u32>,\n    ) {\n      let TIME_LOOP: u32 = 1;                   // 1fpsあたりのループ回数\n      let TIME_STEP: f32 = ${dt}; //1/scene.fps/400;   // 時間刻み(s)\n      let num_balls: u32 = arrayLength(&output);\n      // let num_lines: u32 = maxLineNumber;//arrayLength(&line_input);\n\n      let nx: u32 = u32(scene.nx); //u32(ceil(scene.L/scene.maxRadius)); // x方向の格子点数\n      let ny: u32 = u32(ceil(f32(nx) * scene.height/scene.width)); // y方向の格子点数\n      let spacing: f32 = scene.spacing; //scene.maxRadius*2+0.001; // 格子間隔\n      let grid_size: u32 = u32(scene.grid_size); //u32(ceil(scene.maxRadius/scene.minRadius)) * u32(ceil(scene.maxRadius/scene.minRadius)); // 1グリッドあたりの最大要素数\n\n\n\n      if(global_id.x >= num_balls) {\n        return;\n      }\n\n\n\n      var src_ball = input[global_id.x];\n      let dst_ball = &output[global_id.x];\n\n      (*dst_ball) = src_ball;\n\n      let src_gl_index:u32 = u32(floor(src_ball.position.y/spacing))*nx + u32(floor(src_ball.position.x/spacing)); // 今のインデックス要素数は抜きにして考える\n      let other_index_array: array<i32, 9> = calculationOtherBallIndexArray(nx, src_gl_index); // 判定を行う相手のインデックスの始まりを格納する配列(自分自身と周りの8マス=9マス)\n\n\n      // set const (奥行き1の円柱)\n      let m_i = pow(src_ball.radius, 2.0) * PI * rho;   // 粒子iの質量\n      let I_i = 0.5 * m_i * pow(src_ball.radius, 2.0);  // 粒子iの慣性モーメント\n\n\n      var F_i: f32 = 0.0;                               // 粒子iの弾性力の合力\n      var G_i: f32 = 0.0;                               // 粒子iのせん断力の合力\n      var T_i: f32 = 0.0;                               // 粒子iのトルクの合力\n\n\n      var ef_counter:u32 = 0; // 接触力の相手の数を保存しておく変数\n      var ef_output: array<EF, maxContactParticleNumber + 4 + maxLineNumber>; // 計算した接触力を保存する配列(+4は上下左右の壁)\n      var ef_index_output: array<u32, maxContactParticleNumber>; // 計算した接触粒子を保存する配列\n      for (var i = 0u; i < maxContactParticleNumber; i = i + 1u) {\n        ef_output[i].resilience_force = vec2<f32>(0.0, 0.0);\n        ef_index_output[i] = 0u;\n      }\n      ef_output[maxContactParticleNumber    ].resilience_force = vec2<f32>(0.0, 0.0);\n      ef_output[maxContactParticleNumber + 1].resilience_force = vec2<f32>(0.0, 0.0);\n      ef_output[maxContactParticleNumber + 2].resilience_force = vec2<f32>(0.0, 0.0);\n      ef_output[maxContactParticleNumber + 3].resilience_force = vec2<f32>(0.0, 0.0);\n      // 線分の数ループ\n      for (var i = 0u; i < maxLineNumber; i = i + 1u) {\n        ef_output[maxContactParticleNumber + 4 + i].resilience_force = vec2<f32>(0.0, 0.0);\n      }\n\n\n\n      // Ball/Ball collision\n      // マスごとにループ\n      for(var j = 0; j < 9; j++) {\n        // 格子点が存在しない場合はスキップ\n        if(other_index_array[j] < 0 || other_index_array[j] >= i32(nx)*i32(ny)) {\n          continue;\n        }\n        // gl_inputの対象インデックスのループ\n        for(var k = other_index_array[j]*i32(grid_size); k < other_index_array[j]*i32(grid_size)+i32(grid_size); k++) {\n          \n          // 0は初期値なのでスキップ\n          if(gl_input[u32(k)] == 0) {\n            continue;\n          }\n          // iを算出する\n          var i = gl_input[u32(k)] - 1; // 登録の時に+1しているので-1する(配列の中で0はnullの意味で使用するため)\n\n\n\n\n        // for(var i = 0; i < num_balls; i++) {\n          // 自分自身の場合はスキップ\n          if(i == global_id.x) {\n            continue;\n          }\n\n  \n          var other_ball = input[i];\n          let n = src_ball.position - other_ball.position;\n          let distance = length(n);\n          if(distance >= src_ball.radius + other_ball.radius) {\n            // (*ef_dst).resilience_force = vec2<f32>(0,0); // 復元力を0にする\n            // 現状では終わってから同期する\n            // ef_input[ef_index_ij] = (*ef_dst);\n            continue;\n          }\n\n\n          // 接触力の相手のインデックスを保存しておく(登録時は+1しておく) \n          ef_index_output[ef_counter] = i + 1;\n          var ef_src: EF = EF(vec2<f32>(0.0, 0.0));\n          // 前の相手iに対する接触力を見つける\n          for(var l:u32 = 0; l < maxContactParticleNumber; l++) {\n            // もし1ステップ前の接触力のインデックス配列にiと同じインデックスがあれば、接触力を継承する。なければ初めて接触下として、0のままにする。\n            if(ef_index_input[global_id.x*maxContactParticleNumber + l] == i + 1){\n              ef_src.resilience_force = ef_input[global_id.x*(maxContactParticleNumber + 4 + maxLineNumber) + l].resilience_force;\n              break;\n            }\n          }\n\n\n          let other_mass = pow(other_ball.radius, 2.0) * PI * rho; // 質量;\n  \n          // eta(粘性係数)を求める\n          let eta_ij = calculationEta(m_i, other_mass);\n          // 衝突後の粒子同士の相対速度を求める\n          let u_ji = calculationVelocityAfterCollision(src_ball.position, src_ball.velocity, src_ball.anguler_velocity, src_ball.radius, other_ball.position, other_ball.velocity, other_ball.anguler_velocity, other_ball.radius);\n          // 復元力を求める\n          ef_output[ef_counter].resilience_force = calculationRestoringForceNS(ef_src.resilience_force, u_ji, k_n, k_s, TIME_STEP);\n          // 粘性力を求める\n          let viscous_force = calculationViscousForceNS(eta_ij.x, eta_ij.y, u_ji.x, u_ji.y);\n          // 弾性力を求める\n          let elastic_force_ns = calculationElasticForceNS(ef_output[ef_counter].resilience_force, viscous_force);\n          // 弾性力をxy成分に分解する\n          let elastic_force_xy = calculationElasticForceXY(elastic_force_ns, src_ball.position, other_ball.position);\n          // 合力を増加させる\n          F_i += elastic_force_xy.x;\n          G_i += elastic_force_xy.y;\n          T_i += - elastic_force_ns.y * src_ball.radius;\n  \n          // 接触相手のカウンターを一つ増やす\n          ef_counter += 1; \n        }\n      }\n\n\n      // Ball/Wall collision\n      // 左の壁\n      if((*dst_ball).position.x - (*dst_ball).radius < 0.) {\n        // 復元力のインデックスを求める(自分のインデックスの最後+1)\n        let ef_index_ij = global_id.x*(maxContactParticleNumber + 4 + maxLineNumber) + maxContactParticleNumber;\n        var ef_src = ef_input[ef_index_ij];\n\n        let alpha = 180.0; // 左なので180°\n\n        // eta(粘性係数)を求める(対壁)\n        let eta_ij = calculationEtaWithWall(m_i);\n        // 衝突後の粒子同士の相対速度を求める\n        let u_ji = calculationVelocityAfterCollisionWithWall(src_ball.velocity, src_ball.anguler_velocity, src_ball.radius, alpha);\n        // 復元力を求める\n        ef_output[maxContactParticleNumber].resilience_force = calculationRestoringForceNS(ef_src.resilience_force, u_ji, k_n, k_s, TIME_STEP);\n        // 粘性力を求める\n        let viscous_force = calculationViscousForceNS(eta_ij.x, eta_ij.y, u_ji.x, u_ji.y);\n        // 弾性力を求める\n        let elastic_force_ns = calculationElasticForceNS(ef_output[maxContactParticleNumber].resilience_force, viscous_force);\n        // 弾性力をxy成分に分解する\n        let elastic_force_xy = calculationElasticForceXYWithWall(elastic_force_ns, alpha);\n        // 合力を増加させる\n        F_i += elastic_force_xy.x;\n        G_i += elastic_force_xy.y;\n        T_i += - elastic_force_ns.y * src_ball.radius;\n\n      }else{\n\n        ef_output[maxContactParticleNumber].resilience_force = vec2<f32>(0,0); // 復元力を0にする\n\n      }\n\n      // 下の壁\n      if((*dst_ball).position.y - (*dst_ball).radius < 0.) {\n        // 復元力のインデックスを求める(自分のインデックスの最後+1)\n        let ef_index_ij = global_id.x*(maxContactParticleNumber + 4 + maxLineNumber) + maxContactParticleNumber + 1;\n        var ef_src = ef_input[ef_index_ij];\n\n\n        let alpha = 270.0; // 下なので270°\n\n        // eta(粘性係数)を求める(対壁)\n        let eta_ij = calculationEtaWithWall(m_i);\n        // 衝突後の粒子同士の相対速度を求める\n        let u_ji = calculationVelocityAfterCollisionWithWall(src_ball.velocity, src_ball.anguler_velocity, src_ball.radius, alpha);\n        // 復元力を求める\n        ef_output[maxContactParticleNumber + 1].resilience_force = calculationRestoringForceNS(ef_src.resilience_force, u_ji, k_n, k_s, TIME_STEP);\n        // 粘性力を求める\n        let viscous_force = calculationViscousForceNS(eta_ij.x, eta_ij.y, u_ji.x, u_ji.y);\n        // 弾性力を求める\n        let elastic_force_ns = calculationElasticForceNS(ef_output[maxContactParticleNumber + 1].resilience_force, viscous_force);\n        // 弾性力をxy成分に分解する\n        let elastic_force_xy = calculationElasticForceXYWithWall(elastic_force_ns, alpha);\n        // 合力を増加させる\n        F_i += elastic_force_xy.x;\n        G_i += elastic_force_xy.y;\n        T_i += - elastic_force_ns.y * src_ball.radius;\n\n\n      }else{\n\n        ef_output[maxContactParticleNumber + 1].resilience_force = vec2<f32>(0,0); // 復元力を0にする\n\n      }\n\n      // 右の壁\n      if((*dst_ball).position.x + (*dst_ball).radius >= scene.L) {\n        // 復元力のインデックスを求める(自分のインデックスの最後+1)\n        let ef_index_ij = global_id.x*(maxContactParticleNumber + 4 + maxLineNumber) + maxContactParticleNumber + 2;\n        var ef_src = ef_input[ef_index_ij];\n\n        let alpha = 0.0; // 右なので0°\n\n        // eta(粘性係数)を求める(対壁)\n        let eta_ij = calculationEtaWithWall(m_i);\n        // 衝突後の粒子同士の相対速度を求める\n        let u_ji = calculationVelocityAfterCollisionWithWall(src_ball.velocity, src_ball.anguler_velocity, src_ball.radius, alpha);\n        // 復元力を求める\n        ef_output[maxContactParticleNumber + 2].resilience_force = calculationRestoringForceNS(ef_src.resilience_force, u_ji, k_n, k_s, TIME_STEP);\n        // 粘性力を求める\n        let viscous_force = calculationViscousForceNS(eta_ij.x, eta_ij.y, u_ji.x, u_ji.y);\n        // 弾性力を求める\n        let elastic_force_ns = calculationElasticForceNS(ef_output[maxContactParticleNumber + 2].resilience_force, viscous_force);\n        // 弾性力をxy成分に分解する\n        let elastic_force_xy = calculationElasticForceXYWithWall(elastic_force_ns, alpha);\n        // 合力を増加させる\n        F_i += elastic_force_xy.x;\n        G_i += elastic_force_xy.y;\n        T_i += - elastic_force_ns.y * src_ball.radius;\n\n \n      }else{\n\n        ef_output[maxContactParticleNumber + 2].resilience_force = vec2<f32>(0,0); // 復元力を0にする\n\n      }\n\n      // 上の壁\n      if((*dst_ball).position.y + (*dst_ball).radius >= scene.L/scene.width*scene.height) {\n\n        // 復元力のインデックスを求める(自分のインデックスの最後+1)\n        let ef_index_ij = global_id.x*(maxContactParticleNumber + 4 + maxLineNumber) + maxContactParticleNumber + 3;\n        var ef_src = ef_input[ef_index_ij];\n\n        let alpha = 90.0; // 上なので90°\n\n        // eta(粘性係数)を求める(対壁)\n        let eta_ij = calculationEtaWithWall(m_i);\n        // 衝突後の粒子同士の相対速度を求める\n        let u_ji = calculationVelocityAfterCollisionWithWall(src_ball.velocity, src_ball.anguler_velocity, src_ball.radius, alpha);\n        // 復元力を求める\n        ef_output[maxContactParticleNumber + 3].resilience_force = calculationRestoringForceNS(ef_src.resilience_force, u_ji, k_n, k_s, TIME_STEP);\n        // 粘性力を求める\n        let viscous_force = calculationViscousForceNS(eta_ij.x, eta_ij.y, u_ji.x, u_ji.y);\n        // 弾性力を求める\n        let elastic_force_ns = calculationElasticForceNS(ef_output[maxContactParticleNumber + 3].resilience_force, viscous_force);\n        // 弾性力をxy成分に分解する\n        let elastic_force_xy = calculationElasticForceXYWithWall(elastic_force_ns, alpha);\n        // 合力を増加させる\n        F_i += elastic_force_xy.x;\n        G_i += elastic_force_xy.y;\n        T_i += - elastic_force_ns.y * src_ball.radius;\n\n      }else{\n\n        ef_output[maxContactParticleNumber + 3].resilience_force = vec2<f32>(0,0); // 復元力を0にする\n\n      }\n\n\n      // 線分要素の計算\n      // 線分でループする\n      for(var l = 0u; l < maxLineNumber; l = l + 1u) {\n        // 線分が有効でないときは次のループへ\n        if(line_input[l].isValid == 0u){\n          continue;\n        }\n        let AC = calVectorAC(line_input[l], src_ball.position);\n        let tdash = calTDash(line_input[l], AC);\n        let D = calVectorD(line_input[l], tdash);\n        // 接触判定              \n        let distance = length(src_ball.position - D);\n        // 接触しないとき\n        if(distance >= src_ball.radius + line_input[l].thickness) {\n          ef_output[maxContactParticleNumber + 4 + l].resilience_force = vec2<f32>(0,0); // 復元力を0にする\n          continue;\n        }\n        // 復元力のインデックスを求める(自分のインデックスの最後+1)\n        let ef_index_ij = global_id.x*(maxContactParticleNumber + 4 + maxLineNumber) + maxContactParticleNumber + 4 + l;\n        var ef_src = ef_input[ef_index_ij];\n\n\n        // eta(粘性係数)を求める\n        let eta_ij = calculationEtaWithWall(m_i);\n        // 衝突後の粒子同士の相対速度を求める\n        let u_ji = calculationVelocityAfterCollisionWithStackLine(src_ball.position, src_ball.velocity, src_ball.anguler_velocity, src_ball.radius, D, vec2<f32>(0,0), 0, line_input[l].thickness);\n        // 復元力を求める\n        ef_output[maxContactParticleNumber + 4 + l].resilience_force = calculationRestoringForceNS(ef_src.resilience_force, u_ji, k_n, k_s, TIME_STEP);\n        // 粘性力を求める\n        let viscous_force = calculationViscousForceNS(eta_ij.x, eta_ij.y, u_ji.x, u_ji.y);\n        // 弾性力を求める\n        let elastic_force_ns = calculationElasticForceNS(ef_output[maxContactParticleNumber + 4 + l].resilience_force, viscous_force);\n        // 弾性力をxy成分に分解する\n        let elastic_force_xy = calculationElasticForceXY(elastic_force_ns, src_ball.position, D);\n        // 合力を増加させる\n        F_i += elastic_force_xy.x;\n        G_i += elastic_force_xy.y;\n        T_i += - elastic_force_ns.y * src_ball.radius;\n\n\n      }\n\n\n      // END 線分要素の計算\n\n\n      // 粒子の加速度を求める\n      let acceleration = calculationAcceleration(m_i, F_i, G_i);\n      // 粒子の速度を求める\n      (*dst_ball).velocity = calculationVelocity(src_ball.velocity, acceleration, TIME_STEP);\n      // 粒子の位置を求める\n      (*dst_ball).position = calculationPosition(src_ball.position, (*dst_ball).velocity, TIME_STEP);\n      // 粒子の角加速度を求める\n      let angular_acceleration = calculationAngularAcceleration(I_i, T_i);\n      // 粒子の角速度を求める\n      (*dst_ball).anguler_velocity = calculationAngularVelocity(src_ball.anguler_velocity, angular_acceleration, TIME_STEP);\n      // 粒子の角度を求める\n      (*dst_ball).angle = calculationAngle(src_ball.angle, (*dst_ball).anguler_velocity, TIME_STEP);\n\n\n      // 異なるworkgroup間では現在同期できないのでforloopは使えない\n\n      let gl_index:u32 = u32(floor((*dst_ball).position.y/spacing))*nx + u32(floor((*dst_ball).position.x/spacing));\n\n      var c = atomicAdd(&gl_atomic[gl_index], u32(1));//加算(各関数は次の手順をアトミックに実行します。\n      // 1.atomic_ptrが指す元の値をロードします, \n      // 2.値vを使用して関数名から演算 (例: max) を実行することにより、新しい値を取得します。\n      // 3.atomic_ptrを使用して新しい値を保存します。\n      // 各関数は、アトミック オブジェクトに格納されている元の値を返します。)\n\n      gl_output[gl_index*grid_size+c] = global_id.x+1; // 初期化で0にしているのでindex=0と初期化がかぶらないように+1する\n\n      \n      // 接触力を次のループのために保存する\n      for(var l:u32 = 0; l < maxContactParticleNumber; l++) {\n          // 接触力を代入する\n          ef_input[global_id.x*(maxContactParticleNumber + 4 + maxLineNumber) + l] = ef_output[l];\n          // 接触力のインデックスを代入する\n          ef_index_input[global_id.x*maxContactParticleNumber + l] =  ef_index_output[l];\n      }\n      // 壁の分\n      ef_input[global_id.x*(maxContactParticleNumber + 4 + maxLineNumber) + maxContactParticleNumber]     = ef_output[maxContactParticleNumber];\n      ef_input[global_id.x*(maxContactParticleNumber + 4 + maxLineNumber) + maxContactParticleNumber + 1] = ef_output[maxContactParticleNumber + 1];\n      ef_input[global_id.x*(maxContactParticleNumber + 4 + maxLineNumber) + maxContactParticleNumber + 2] = ef_output[maxContactParticleNumber + 2];\n      ef_input[global_id.x*(maxContactParticleNumber + 4 + maxLineNumber) + maxContactParticleNumber + 3] = ef_output[maxContactParticleNumber + 3];\n\n      // 線分の分\n      for(var l:u32 = 0; l < maxLineNumber; l++) {\n          // 接触力を代入する\n          ef_input[global_id.x*(maxContactParticleNumber + 4 + maxLineNumber) + maxContactParticleNumber + 4 + l] = ef_output[maxContactParticleNumber + 4 + l];\n      }\n    }\n  `,\n  });\n\n  const bindGroupLayout1 = device.createBindGroupLayout({\n    entries: [\n      {\n        binding: 0,\n        visibility: GPUShaderStage.COMPUTE,\n        buffer: {\n          type: \"storage\",\n        },\n      },\n      {\n        binding: 1,\n        visibility: GPUShaderStage.COMPUTE,\n        buffer: {\n          type: \"storage\",\n        },\n      },\n      {\n        binding: 2,\n        visibility: GPUShaderStage.COMPUTE,\n        buffer: {\n          type: \"storage\",\n        },\n      },\n      {\n        binding: 3,\n        visibility: GPUShaderStage.COMPUTE,\n        buffer: {\n          type: \"uniform\",\n        },\n      },\n      {\n        binding: 4,\n        visibility: GPUShaderStage.COMPUTE,\n        buffer: {\n          type: \"storage\",\n        },\n      },\n      {\n        binding: 5,\n        visibility: GPUShaderStage.COMPUTE,\n        buffer: {\n          type: \"storage\",\n        },\n      },\n      {\n        binding: 6,\n        visibility: GPUShaderStage.COMPUTE,\n        buffer: {\n          type: \"storage\",\n        },\n      },\n      {\n        binding: 7,\n        visibility: GPUShaderStage.COMPUTE,\n        buffer: {\n          type: \"storage\",\n        },\n      },\n    ],\n  });\n\n  const bindGroupLayout2 = device.createBindGroupLayout({\n    entries: [\n      {\n        binding: 0,\n        visibility: GPUShaderStage.COMPUTE,\n        buffer: {\n          type: \"storage\",\n        },\n      },\n      {\n        binding: 1,\n        visibility: GPUShaderStage.COMPUTE,\n        buffer: {\n          type: \"storage\",\n        },\n      },\n    ],\n  });\n\n  const pipeline = device.createComputePipeline({\n    layout: device.createPipelineLayout({\n      bindGroupLayouts: [bindGroupLayout1, bindGroupLayout2],\n    }),\n    compute: {\n      module,\n      entryPoint: \"main\",\n    },\n  });\n\n  // --- ③ バッファサイズを16バイト境界＝(14×4=56 →64など)に調整し、UNIFORM ---\n  const scene = device.createBuffer({\n    size: 16 * Float32Array.BYTES_PER_ELEMENT, // ★ 16バイトアライン推奨\n    usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST, \n  });\n\n  const input = device.createBuffer({\n    size: BUFFER_SIZE,\n    usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_DST,\n  });\n\n  const output = device.createBuffer({\n    size: BUFFER_SIZE,\n    usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC | GPUBufferUsage.VERTEX,\n  });\n\n  const ef_input = device.createBuffer({\n    size: EF_BUFFER_SIZE,\n    usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_DST,\n  });\n\n  const ef_index_input = device.createBuffer({\n    size: EF_INDEX_BUFFER_SIZE,\n    usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_DST,\n  });\n\n  const gl_input = device.createBuffer({\n    size: GL_BUFFER_SIZE,\n    usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_DST,\n  });\n\n  const gl_output = device.createBuffer({\n    size: GL_BUFFER_SIZE,\n    usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST,\n  });\n\n  const gl_atomic = device.createBuffer({\n    size: GL_ATOMIC_BUFFER_SIZE,\n    usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST,\n  });\n\n  const line_input = device.createBuffer({\n    size: LINE_BUFFER_SIZE,\n    usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_DST,\n  });\n\n  const line_output = device.createBuffer({\n    size: LINE_BUFFER_SIZE,\n    usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC | GPUBufferUsage.VERTEX | GPUBufferUsage.COPY_DST,\n  });\n\n  const bindGroup1 = device.createBindGroup({\n    layout: bindGroupLayout1,\n    entries: [\n      {\n        binding: 0,\n        resource: {\n          buffer: input,\n        },\n      },\n      {\n        binding: 1,\n        resource: {\n          buffer: output,\n        },\n      },\n      {\n        binding: 2,\n        resource: {\n          buffer: ef_input,\n        },\n      },\n      {\n        binding: 3,\n        resource: {\n          buffer: scene,\n        },\n      },\n      {\n        binding: 4,\n        resource: {\n          buffer: gl_input,\n        },\n      },\n      {\n        binding: 5,\n        resource: {\n          buffer: gl_output,\n        },\n      },\n      {\n        binding: 6,\n        resource: {\n          buffer: gl_atomic,\n        },\n      },\n      {\n        binding: 7,\n        resource: {\n          buffer: ef_index_input,\n        },\n      },\n    ],\n  });\n\n\n  const bindGroup2 = device.createBindGroup({\n    layout: bindGroupLayout2,\n    entries: [\n      {\n        binding: 0,\n        resource: {\n          buffer: line_input,\n        },\n      },\n      {\n        binding: 1,\n        resource: {\n          buffer: line_output,\n        },\n      },\n    ],\n  });\n\n\n  // START Geometry Shader\n\n  // 粒子要素の描画関係\n\n  // シェーダーモジュール\n  const cellShaderModule = device.createShaderModule({\n    label: \"Cell shader\",\n    code: `\n    // Your shader code will go here\n\n    struct Ball {\n      radius: f32,\n      padding: f32,\n      position: vec2<f32>,\n      velocity: vec2<f32>,\n      angle: f32,\n      anguler_velocity: f32,\n    }\n    @group(0) @binding(0)\n    var<storage, read> output: array<Ball>;\n\n    struct VertexOutput {\n      @builtin(position) pos: vec4f,\n      @location(0) cellColor: vec4f, // New line!\n    };\n\n    struct Scene {\n      width: f32, // canvasの幅(pixel)\n      height: f32, // canvasの高さ(pixel)\n      L: f32, // canvasの幅(m)\n      fps: f32, // フレームレート\n      minRadius: f32, // 粒子の最小半径(m)\n      maxRadius: f32, // 粒子の最大半径(m)\n      nx: f32, // x方向の格子点数\n      grid_size: f32, // 1グリッドあたりの最大要素数\n      spacing: f32, // 格子間隔\n      numBalls: f32, // 粒子数\n      maxContactParticleNumber: f32, // 最大接触粒子数\n      offsetX: f32,               // カメラ中心 X\n      offsetY: f32,               // カメラ中心 Y\n      zoomValue: f32, // ズーム係数\n      colorMode: f32, // カラーモード\n    }\n\n    @group(0) @binding(1)\n    var<uniform> scene: Scene;\n\n    // 頂点シェーダーを定義する\n    @vertex\n    fn vertexMain(@builtin(vertex_index) vertex_index : u32, @builtin(instance_index) instance_index: u32, @location(0) pos: vec2<f32>) ->\n    VertexOutput {\n      var vertexOutput: VertexOutput;\n      let widthByL: f32 = scene.width/scene.L; \n      \n      // パーティクル中心 (ピクセル座標)(左下基準)\n      let cx = output[instance_index].position.x * widthByL;\n      let cy = output[instance_index].position.y * widthByL;\n      \n      // 回転\n      let rx = cos(radians(output[instance_index].angle)) * pos.x\n            - sin(radians(output[instance_index].angle)) * pos.y;\n      let ry = sin(radians(output[instance_index].angle)) * pos.x\n            + cos(radians(output[instance_index].angle)) * pos.y;\n\n      // 中心オフセット+NDC変換\n      // offsetX, offsetY はピクセル単位\n      let ndcX = ((cx - scene.offsetX )  + rx * output[instance_index].radius * widthByL)\n                / scene.width * 2.0 * scene.zoomValue - 1.0;\n      let ndcY = ((cy - scene.offsetY )  + ry * output[instance_index].radius * widthByL)\n                / scene.height * 2.0 * scene.zoomValue - 1.0;\n\n      // ズーム係数を適用\n      vertexOutput.pos = vec4f(ndcX, ndcY, 0.0, 1.0);\n\n      // 粒子番号の場合\n      if(u32(scene.colorMode) == 0){\n        if(instance_index < u32(0.25*scene.numBalls)){\n          // vertexOutput.cell = 0.25;\n          vertexOutput.cellColor = vec4f(0.25, 0, 1.0, 1);\n        }else if(instance_index < u32(0.5*scene.numBalls)){\n          vertexOutput.cellColor = vec4f(0.5, 0, 1.0, 1);\n        }else if(instance_index < u32(0.75*scene.numBalls)){\n          vertexOutput.cellColor = vec4f(0.75, 0, 1.0, 1);\n        }else{\n          vertexOutput.cellColor = vec4f(1.0, 0, 1.0, 1);\n        }\n      }else if(u32(scene.colorMode) == 1){\n        let velocity = length(output[instance_index].velocity);\n        vertexOutput.cellColor = vec4f(velocity, 0, 100, 1);\n      }\n\n      return vertexOutput; // (X, Y, Z, W) w の値は、3 次元同次座標系における頂点の 4 つ目の要素,3D グラフィックのレンダリングでよく行われる 4x4 行列を使用した計算が可能になる\n    }\n\n    // フラグメント シェーダーを定義する(戻り値は0～1)\n    @fragment\n    fn fragmentMain(input: VertexOutput) -> @location(0) vec4f {\n\n      return input.cellColor; // (Red, Green, Blue, Alpha)\n    }   \n  `\n  });\n\n\n  // 頂点を定義する\n  function createCircleVertices(centerX, centerY, radius, segments) {\n    const vertices = [];\n    for (let i = 1; i < segments; i++) { // 一つ欠けさせるために0番目はスキップ\n      const theta1 = (i / segments) * 2.0 * Math.PI;\n      const theta2 = ((i + 1) / segments) * 2.0 * Math.PI;\n      const x1 = centerX + radius * Math.cos(theta1);\n      const y1 = centerY + radius * Math.sin(theta1);\n      const x2 = centerX + radius * Math.cos(theta2);\n      const y2 = centerY + radius * Math.sin(theta2);\n      // 頂点データに中心点と円周上の点を追加\n      vertices.push(centerX, centerY, x1, y1, x2, y2);\n    }\n    return new Float32Array(vertices);\n  }\n  // 頂点バッファを作成する\n  const vertices = createCircleVertices(0, 0, 1, 10);\n  // バッファの作成\n  const vertexBuffer = device.createBuffer({\n    label: \"Cell vertices\",\n    size: vertices.byteLength,\n    usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_DST | GPUBufferUsage.VERTEX,\n  });\n  // END 円\n\n  // 頂点データをバッファのメモリにコピーする\n  device.queue.writeBuffer(vertexBuffer, /*bufferOffset=*/0, vertices);\n\n  // 頂点のレイアウトを定義する\n  // vertexBufferLayoutを作成する\n  const vertexBufferLayout = {\n    arrayStride: 8,\n    attributes: [{\n      format: \"float32x2\",\n      offset: 0,\n      shaderLocation: 0, // Position, see vertex shader\n    }],\n  };\n\n  const renderBindGroupLayout = device.createBindGroupLayout({\n    entries: [\n      {\n        binding: 0,\n        visibility: GPUShaderStage.VERTEX,\n        buffer: { type: \"read-only-storage\" },\n      },\n      {\n        binding: 1,\n        visibility: GPUShaderStage.VERTEX,\n        buffer: {\n          type: \"uniform\",\n        },\n      },\n    ],\n  });\n\n\n\n  const renderBindGroup = device.createBindGroup({\n    label: \"Cell renderer bind group\",\n    layout: renderBindGroupLayout,\n    entries: [\n      {\n        binding: 0,\n        resource: {\n          buffer: output\n        }\n      },\n      {\n        binding: 1,\n        resource: {\n          buffer: scene,\n        },\n      },\n    ],\n  });\n\n  const renderPipelineLayout = device.createPipelineLayout({\n    label: \"Cell Pipeline Layout\",\n    bindGroupLayouts: [renderBindGroupLayout],\n  });\n\n  // レンダリング パイプラインを作成する\n  const cellPipeline = device.createRenderPipeline({\n    label: \"Cell pipeline\",\n    layout: renderPipelineLayout,\n    vertex: {\n      module: cellShaderModule,\n      entryPoint: \"vertexMain\",\n      buffers: [vertexBufferLayout]\n    },\n    fragment: {\n      module: cellShaderModule,\n      entryPoint: \"fragmentMain\",\n      targets: [{\n        format: canvasFormat\n      }]\n    }\n  });\n\n  // END 粒子要素の描画関係\n\n\n  // 線分要素の描画関係\n\n  // まずlineShaderModuleを定義（まだ存在しない場合）\n  const lineShaderModule = device.createShaderModule({\n    label: \"Line shader\",\n    code: `\n      struct Line {\n        thickness: f32,\n        isValid: u32,\n        position_1: vec2<f32>,\n        position_2: vec2<f32>,\n        velocity: vec2<f32>,\n        angle: f32,\n        anguler_velocity: f32,\n      }\n      \n      @group(0) @binding(0)\n      var<storage, read> line_output: array<Line>;\n      \n      struct Scene {\n        width: f32, height: f32, L: f32, fps: f32,\n        minRadius: f32, maxRadius: f32, nx: f32, grid_size: f32,\n        spacing: f32, numBalls: u32, maxContactParticleNumber: f32,\n        offsetX: f32, offsetY: f32, zoomValue: f32, colorMode: f32,\n      }\n      \n      @group(0) @binding(1)\n      var<uniform> scene: Scene;\n      \n      struct VertexOutput {\n        @builtin(position) pos: vec4f,\n        @location(0) color: vec4f,\n      };\n      \n      @vertex\n      fn vertexMain(@location(0) pos: vec2<f32>, @builtin(vertex_index) vertexIndex: u32) -> VertexOutput {\n        var output: VertexOutput;\n        let widthByL: f32 = scene.width/scene.L;\n        \n        // 座標を決定（0と1のインデックスで線分の両端を取得）\n        let lineIndex = vertexIndex / 2;\n        let pointIndex = vertexIndex % 2;\n        \n              \n        // isValidをチェック\n        let isVisible: bool = line_output[lineIndex].isValid != 0u;\n\n        // select(falseの場合の値, trueの場合の値, 条件式)\n        // 線分は常に2つの頂点（始点と終点）から構成されます\n        // pointIndexは処理中の頂点が線分のどちら側かを示します（0か1）\n        // GPUでは条件分岐（if文）を避けて、このselectのような関数を使うことでパフォーマンスが向上します\n        let position = select(\n          line_output[lineIndex].position_1,\n          line_output[lineIndex].position_2,\n          pointIndex == 1\n        );\n        \n        // NDC座標に変換\n        let ndcX = ((position.x * widthByL) - scene.offsetX) \n                  / scene.width * 2.0 * scene.zoomValue - 1.0;\n        let ndcY = ((position.y * widthByL) - scene.offsetY) \n                  / scene.height * 2.0 * scene.zoomValue - 1.0;\n        \n        // isValid が 0 の場合は線分を画面外に配置（実質的に非表示にする）\n        if (isVisible) {\n          output.pos = vec4f(ndcX, ndcY, 0.0, 1.0);\n          output.color = vec4f(1.0, 0.5, 0.0, 1.0); // オレンジ色\n        } else {\n          // 画面外に配置（クリッピングされる）\n          output.pos = vec4f(0.0, 0.0, 10.0, 0.0); \n          output.color = vec4f(0.0, 0.0, 0.0, 0.0); // 透明\n        }\n        \n        return output;\n      }\n      \n      @fragment\n      fn fragmentMain(input: VertexOutput) -> @location(0) vec4f {\n        return input.color;\n      }\n    `\n  });\n\n  // 線分の頂点バッファレイアウト\n  const lineVertexBufferLayout = {\n    arrayStride: 8,\n    attributes: [{\n      format: \"float32x2\",\n      offset: 0,\n      shaderLocation: 0,\n    }],\n  };\n\n  // 線分の頂点データ（単純な2点を定義するだけでOK）\n  const lineVertices = new Float32Array([\n    0, 0,  // 開始点（シェーダー内で実際の位置に置き換え）\n    0, 0   // 終了点（シェーダー内で実際の位置に置き換え）\n  ]);\n\n  // 線分の頂点バッファ\n  const lineVertexBuffer = device.createBuffer({\n    label: \"Line vertices\",\n    size: lineVertices.byteLength,\n    usage: GPUBufferUsage.VERTEX | GPUBufferUsage.COPY_DST,\n  });\n  device.queue.writeBuffer(lineVertexBuffer, 0, lineVertices);\n\n  // 線分用のバインドグループを作成\n  const lineBindGroup = device.createBindGroup({\n    label: \"Line renderer bind group\",\n    layout: renderBindGroupLayout,\n    entries: [\n      {\n        binding: 0,\n        resource: {\n          buffer: line_output\n        }\n      },\n      {\n        binding: 1,\n        resource: {\n          buffer: scene,\n        },\n      },\n    ],\n  });\n\n  // 線分用のパイプラインを作成\n  const linePipeline = device.createRenderPipeline({\n  label: \"Line pipeline\",\n  layout: renderPipelineLayout, // 同じレイアウトを使用可能\n  vertex: {\n    module: lineShaderModule, // 線分用のシェーダーモジュール\n    entryPoint: \"vertexMain\",\n    buffers: [lineVertexBufferLayout]\n  },\n  fragment: {\n    module: lineShaderModule, \n    entryPoint: \"fragmentMain\",\n    targets: [{ format: canvasFormat }]\n  },\n  primitive: {\n    topology: \"line-list\", // ここで線分として描画指定\n    stripIndexFormat: undefined\n  }\n  });\n\n  // END 線分要素の描画関係\n\n  // END Geometry Shader\n\n  // 計算を更新する関数\n  function updateCompute(commandEncoder) {\n    const dispatchSize = Math.ceil(NUM_BALLS / 64);\n    const computePassEncoder = commandEncoder.beginComputePass(); // 「これから計算処理の指示を記録します」という宣言\n    computePassEncoder.setPipeline(pipeline); // どのシェーダープログラムを実行するかを指定\n    computePassEncoder.setBindGroup(0, bindGroup1); // シェーダーが使用するデータリソースを指定(粒子)\n    computePassEncoder.setBindGroup(1, bindGroup2); // シェーダーが使用するデータリソースを指定(線分)\n    computePassEncoder.dispatchWorkgroups(dispatchSize); // 「ワークグループ」と呼ばれる計算ユニットをいくつ起動するかを指定\n    computePassEncoder.end(); // 「計算処理の指示はここまでです」という宣言\n    return commandEncoder;\n  }\n\n  // レンダリングを更新する関数\n  function updateRender(commandEncoder) {\n    const renderPassDescriptor = {\n      colorAttachments: [{\n        view: ctx.getCurrentTexture().createView(),\n        loadOp: \"clear\",\n        clearValue: { r: 0, g: 0, b: 0.4, a: 1 },\n        storeOp: \"store\",\n      }],\n    };\n    const renderPassEncoder = commandEncoder.beginRenderPass(renderPassDescriptor);\n    // 粒子を描画\n    renderPassEncoder.setPipeline(cellPipeline);\n    renderPassEncoder.setVertexBuffer(0, vertexBuffer);\n    renderPassEncoder.setBindGroup(0, renderBindGroup);\n    renderPassEncoder.draw(vertices.length / 2, NUM_BALLS);\n\n\n    // 次に線分を描画\n    renderPassEncoder.setPipeline(linePipeline);\n    renderPassEncoder.setVertexBuffer(0, lineVertexBuffer);\n    renderPassEncoder.setBindGroup(0, lineBindGroup);\n    renderPassEncoder.draw(lineVertices.length / 2); // インスタンス描画なしの例\n\n\n    renderPassEncoder.end();\n    return commandEncoder;\n  }\n\n\n  // ページ初回ロード時\n  initializeState();\n\n\n  // 初期化の処理\n  function initializeState() {\n\n    // シーン用バッファを再設定し、再描画を行う\n    device.queue.writeBuffer(scene, 0, initializeSceneBuffer());\n\n    // 初期化用のバッファデータの粒子要素の配列\n    device.queue.writeBuffer(input, 0, initializeInputBallsBuffer());\n\n    // 初期化用のバッファデータの線分要素の配列\n    device.queue.writeBuffer(line_input, 0, initializeInputLinesBuffer());\n    device.queue.writeBuffer(line_output, 0, initializeInputLinesBuffer());\n\n    // 初期化用のバッファデータの接触力の配列\n    let ef_inputBalls = new Float32Array(new ArrayBuffer(EF_BUFFER_SIZE));\n    device.queue.writeBuffer(ef_input, 0, ef_inputBalls);\n    // 初期化用のバッファデータの接触力の相手粒子の配列\n    let ef_index_inputBalls = new Uint32Array(new ArrayBuffer(EF_INDEX_BUFFER_SIZE));\n    device.queue.writeBuffer(ef_index_input, 0, ef_index_inputBalls);\n    // 初期化用のバッファデータの接触相手粒子の配列\n    let gl_inputBalls = new Uint32Array(new ArrayBuffer(GL_BUFFER_SIZE));\n    device.queue.writeBuffer(gl_input, 0, gl_inputBalls);\n    // 初期化用のバッファデータの接触相手の粒子数の配列\n    let gl_input_atomic = new Uint32Array(new ArrayBuffer(GL_ATOMIC_BUFFER_SIZE));\n    device.queue.writeBuffer(gl_atomic, 0, gl_input_atomic);\n\n    // GPUコマンドの作成\n    let commandEncoder = device.createCommandEncoder();\n    // 一度計算する\n    commandEncoder = updateCompute(commandEncoder);\n    // バッファのコピー\n\n    commandEncoder.copyBufferToBuffer(output, 0, input, 0, BUFFER_SIZE);\n    commandEncoder.copyBufferToBuffer(gl_output, 0, gl_input, 0, GL_BUFFER_SIZE);\n\n\n    // レンダリングを実行\n    commandEncoder = updateRender(commandEncoder);\n\n    device.queue.submit([commandEncoder.finish()]); // commandEncoder.finish()でコマンドリストを完成させ、device.queue.submit()でGPUに送信することで、実際の処理が行われる\n\n  }\n\n\n\n  // overlay 用キャンバス・コンテキスト(計算時間を表示するために追加)\n  const overlayCtx = overlayCanvas.getContext(\"2d\");\n  overlayCanvas.width = width; // キャンバスの幅(px)\n  overlayCanvas.height = height; // キャンバスの高さ(px)\n  overlayCanvas.style.width = width + 'px';\n  overlayCanvas.style.height = height + 'px';\n  // オーバーレイキャンバスでテキスト描画する関数\n  function drawFPS(timeInSec, unit) {\n    overlayCtx.clearRect(0, 0, overlayCanvas.width, overlayCanvas.height);\n    // フォントサイズを設定（固定サイズを維持）\n    const fontSize = 24;\n    overlayCtx.font = `${fontSize}px serif`;\n    overlayCtx.fillStyle = \"white\";\n    const text = timeInSec.toFixed(2) + \" \" + unit;\n    // テキストの横幅を測定\n    const textWidth = overlayCtx.measureText(text).width;\n    // 右上に配置（右端から20px、上端から20px離す）\n    const x = overlayCanvas.width - textWidth - 40;\n    const y = fontSize + 20; // フォントサイズ + 余白\n    // テキスト描画\n    overlayCtx.fillText(text, x, y);\n  }\n\n  // カラーモードの変更時に実行される関数\n  function changeColorMode(mode) {\n    switch(mode){\n      case \"id\":\n        colorMode = 0;\n        break;\n      case \"vabs\":\n        colorMode = 1;\n        break;\n    }\n\n    // 再レンダリング\n    updateZoom();\n  }\n\n  // ラジオボタン要素のイベントの追加\n  modeRadioId.addEventListener(\"change\", () => changeColorMode(\"id\"));\n  modeRadioVabs.addEventListener(\"change\", () => changeColorMode(\"vabs\"));\n  \n\n\n  // マウスのドラッグ関係\n  // マウス押下時の処理\n  canvas.addEventListener(\"mousedown\", (event) => {\n    isDragging = true;\n    canvas.style.cursor = \"grabbing\"; // ドラッグ時のカーソル\n    const rect = canvas.getBoundingClientRect();\n    lastMouseX = event.clientX - rect.left;\n    lastMouseY = event.clientY - rect.top;\n  });\n  // マウス移動時の処理\n  canvas.addEventListener(\"mousemove\", (event) => {\n    // ドラッグしてなければ抜ける\n    if (!isDragging) return;\n    const rect = canvas.getBoundingClientRect();\n    const mouseX = event.clientX - rect.left;\n    const mouseY = event.clientY - rect.top;\n  \n    const dx = mouseX - lastMouseX;\n    const dy = mouseY - lastMouseY;\n  \n    // zoomしても移動量は一定にする\n    offsetX -= dx/zoomValue;\n    // Canvas は上が0で下に行くほど大きくなる。WebGPUでは下端が-1,上端が1なので符号を反転\n    offsetY += dy/zoomValue;\n  \n    lastMouseX = mouseX;\n    lastMouseY = mouseY;\n    // レンダリングを更新\n    updateZoom();\n  });\n  \n  canvas.addEventListener(\"mouseup\", () => {\n    isDragging = false;\n    canvas.style.cursor = \"grab\"; // カーソルを元に戻す\n  });\n  // END マウスのドラッグ関係\n\n  // マウスのズーム関係\n  canvas.addEventListener(\"wheel\", (event) => {\n    event.preventDefault();\n    // キャンバス上のマウス座標を取得\n    const rect = canvas.getBoundingClientRect();\n    const mouseX = event.clientX - rect.left;\n    const mouseY = event.clientY - rect.top;\n\n    const oldZoom = zoomValue;\n    const zoomFactor = 1.1; // ズームの強さ\n    if (event.deltaY < 0) {\n      zoomValue *= zoomFactor;\n    } else {\n      zoomValue /= zoomFactor;\n    }\n    zoomValue = Math.max(0.1, Math.min(zoomValue, 12)); // ズーム範囲の制限\n\n    // マウス座標を基準にカメラ中心を調整し、ピボット拡大縮小\n    const ratio = zoomValue / oldZoom;\n\n    // ピボットズーム計算：マウス位置を固定点として、centerXとcenterYを調整\n    offsetX = mouseX - 1/ratio * (mouseX - offsetX);\n    offsetY = (ctx.canvas.height-mouseY) - 1/ratio * ((ctx.canvas.height-mouseY) - offsetY);\n    updateZoom();\n  });\n\n  // ズーム更新関数\n  function updateZoom() {\n    // シーン用バッファを再設定し、再描画を行う\n    device.queue.writeBuffer(scene, 0, initializeSceneBuffer());\n\n    // レンダリングを実行\n    let commandEncoder = device.createCommandEncoder();\n\n    commandEncoder = updateRender(commandEncoder);\n    const commands = commandEncoder.finish();\n    device.queue.submit([commands]);\n  }\n  // END マウスのズーム関係\n\n\n\n  // 線分表示チェックボックスの制御\n  enableLineCheckbox.addEventListener(\"change\", () => {\n    // チェックボックスの状態に応じて線分の有効/無効を切り替え   \n    // 更新した値をGPUバッファに反映\n    // 両方のバッファを更新\n    device.queue.writeBuffer(line_input, 0, initializeInputLinesBuffer());\n    device.queue.writeBuffer(line_output, 0, initializeInputLinesBuffer()); // line_outputも更新する\n    // レンダリングの更新\n    updateZoom();\n  });\n  // END 線分表示チェックボックスの制御\n\n\n\n  let counter = 0;\n\n  // メインループ\n  async function updateGrid(actualFps) {\n    // 実際のFPSから反復回数を計算\n    const iteration = Math.ceil(1 / actualFps / dt);\n\n    // コマンドを記録するエンコーダーを作成する\n    let commandEncoder = device.createCommandEncoder();\n    // cpu側でループする\n    for (let i = 0; i < iteration; i++) {\n      commandEncoder.clearBuffer(gl_atomic); // 初期化\n      commandEncoder.clearBuffer(gl_output); // 初期化\n      // 計算更新\n      commandEncoder = updateCompute(commandEncoder);\n      commandEncoder.copyBufferToBuffer(output, 0, input, 0, BUFFER_SIZE); // 粒子要素コピー\n      commandEncoder.copyBufferToBuffer(gl_output, 0, gl_input, 0, GL_BUFFER_SIZE); // 粒子のインデックス配列をコピー\n\n    }\n    // END cpu側でループする場合\n\n    // レンダリング更新\n    commandEncoder = updateRender(commandEncoder);\n    // 一連のコマンドをパッケージ化する\n    const commands = commandEncoder.finish();\n    // コマンド送信\n    device.queue.submit([commands]);\n\n    counter++;\n  }\n  // END メインループ\n\n  // 変更後: requestAnimationFrameを使ったループ\n  let animationId = undefined;\n  let lastTime = 0;\n  let elapsedTime = 0; // シミュレーション開始時間を保存\n  const targetFps = 30; // 任意のFPS\n  const frameDuration = 1000 / targetFps;\n  function animate(currentTime) {\n    // 初回実行時に開始時間を記録\n    if (!lastTime) {\n      lastTime = currentTime;\n    }\n    \n    const deltaTime = currentTime - lastTime;\n    // 設定したFPSより時間が経っていたら計算を実行する\n    if (deltaTime >= frameDuration) {\n      // 実際のFPSを計算（1秒あたりのフレーム数）\n      const actualFps = 1000 / deltaTime;\n      // console.log(\"actualFps\", actualFps);\n      // FPS表示を更新\n      // drawFPS(actualFps, \"FPS\");\n      \n      // 経過時間を計算（ミリ秒から秒に変換）\n      elapsedTime = elapsedTime + deltaTime / 1000;\n      \n      // 時間表示を更新\n      drawFPS(elapsedTime, \"s\");\n      // 現在の時間を保存しておく \n      lastTime = currentTime;\n      // 計算実行 \n      updateGrid(actualFps);\n    }\n    \n    animationId = requestAnimationFrame(animate);\n  }\n\n  // スタート処理\n  function start() {\n    // スタートしていなければスタートする\n    if(animationId === undefined){\n      animationId = requestAnimationFrame(animate);\n      lastTime = undefined;\n      console.log(\"Simulation started.\");\n    }\n  }\n\n  // Start ボタンのイベントリスナーを追加\n  startButton.addEventListener(\"click\", start, false);\n\n\n\n  // ストップ処理\n  function stopSimulation() {\n    // スタートしていればストップする\n    if (animationId !== undefined) {\n      cancelAnimationFrame(animationId);\n      animationId = undefined;\n    }\n    console.log(\"Simulation stopped.\");\n  }\n\n  // Stop ボタンのイベントリスナーを追加\n  stopButton.addEventListener(\"click\", stopSimulation, false);\n\n  // シミュレーションリセット処理\n  function resetSimulation() {\n    // スタートしていれば停止する\n    if (animationId !== undefined) {\n      cancelAnimationFrame(animationId);\n      animationId = undefined;\n    }\n\n    // シミュレーションカウンタのリセット\n    elapsedTime = 0;\n    lastTime = undefined;\n    counter = 0;\n    drawFPS(elapsedTime, \"s\");\n    // バッファの初期化\n    initializeState();\n\n    console.log(\"Simulation reset complete.\");\n  }\n  // Reset ボタンのイベントリスナーを追加\n  resetButton.addEventListener(\"click\", resetSimulation, false);\n\n  // リセット押下時の処理\n  function resetView() {\n    // 各パラメータを初期化\n    isDragging = false;\n    lastMouseX = 0;\n    lastMouseY = 0;\n    zoomValue = 1.0;\n    offsetX = 0;\n    offsetY = 0;\n    // 更新\n    updateZoom();\n  }\n\n  // restart ボタンのイベントリスナーを追加\n  resetViewButton.addEventListener(\"click\", resetView, false);\n\n  // aとbの間のランダムな数を計算する関数\n  function random(a, b) {\n    return Math.random() * (b - a) + a;\n  }\n\n  // クランプ関数\n  function clamp(value, min, max) {\n    return Math.min(Math.max(value, min), max);\n  }\n  \n})();"]}