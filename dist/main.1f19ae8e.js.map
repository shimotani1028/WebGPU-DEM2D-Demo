{"version":3,"sources":["main.js","C:/Users/15X03Y2/AppData/Roaming/npm/node_modules/parcel-bundler/src/builtins/hmr-runtime.js"],"names":["_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","value","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","return","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","catch","_catch","delegateYield","asyncGeneratorStep","_asyncToGenerator","arguments","apply","_next","_throw","_callee2","params","parameter","adapter","_adapter$limits","maxBufferSize","maxStorageBufferBindingSize","device","canvas","width","height","ctx","widthLength","NUM_LINES","LINE_BUFFER_COUNT","LINE_BUFFER_SIZE","x1","y1","x2","y2","NUM_BALLS","BUFFER_COUNT","BUFFER_SIZE","minRadius","maxRadius","spacing","nx","grid_size","GL_BUFFER_SIZE","GL_ATOMIC_BUFFER_SIZE","theta","maxContactParticleNumber","EF_BUFFER_SIZE","EF_INDEX_BUFFER_SIZE","fps","offsetX","offsetY","zoomValue","colorMode","isDragging","lastMouseX","lastMouseY","enableLineCheckbox","overlayCanvas","modeRadioId","modeRadioVabs","startButton","resetButton","stopButton","resetViewButton","initializeSceneBuffer","inputBalls","initializeInputBallsBuffer","initializeInputLinesBuffer","canvasFormat","fatal","module","bindGroupLayout1","bindGroupLayout2","pipeline","scene","input","output","ef_input","ef_index_input","gl_input","gl_output","gl_atomic","line_input","line_output","bindGroup1","bindGroup2","cellShaderModule","createCircleVertices","vertices","vertexBuffer","vertexBufferLayout","renderBindGroupLayout","renderBindGroup","renderPipelineLayout","cellPipeline","lineShaderModule","lineVertexBufferLayout","lineVertices","lineVertexBuffer","lineBindGroup","linePipeline","updateCompute","updateRender","initializeState","overlayCtx","drawFPS","changeColorMode","updateZoom","counter","timerId","UPDATE_INTERVAL","updateGrid","_updateGrid","start","stopSimulation","resetSimulation","resetView","random","clamp","_callee2$","_context2","_clamp","min","max","Math","_random","b","_resetView","_resetSimulation","undefined","clearInterval","console","log","_stopSimulation","_start","setInterval","_updateGrid3","_callee","commandEncoder","_i4","commands","end","_callee$","_context","performance","now","createCommandEncoder","clearBuffer","copyBufferToBuffer","queue","submit","_updateGrid2","_updateZoom","writeBuffer","_changeColorMode","mode","_drawFPS","timeInSec","unit","clearRect","fontSize","font","concat","fillStyle","text","toFixed","textWidth","measureText","x","fillText","_initializeState","ef_inputBalls","Float32Array","ArrayBuffer","ef_index_inputBalls","Uint32Array","gl_inputBalls","gl_input_atomic","_updateRender","renderPassDescriptor","colorAttachments","view","getCurrentTexture","createView","loadOp","clearValue","storeOp","renderPassEncoder","beginRenderPass","setPipeline","setVertexBuffer","setBindGroup","draw","_updateCompute","dispatchSize","ceil","computePassEncoder","beginComputePass","dispatchWorkgroups","_createCircleVertices","centerX","centerY","radius","segments","theta1","PI","theta2","cos","sin","_fatal","msg","document","body","innerHTML","_initializeInputLines","inputLines","lineEnabled","checked","_initializeInputBalls","_initializeSceneBuffe","_parameter","def","has","parseFloat","get","URLSearchParams","location","search","navigator","gpu","requestAdapter","limits","requestDevice","requiredLimits","maxStorageBuffersPerShaderStage","getElementById","getContext","style","BYTES_PER_ELEMENT","pow","atan","sqrt","cursor","floor","getPreferredCanvasFormat","configure","format","createShaderModule","code","createBindGroupLayout","entries","binding","visibility","GPUShaderStage","COMPUTE","buffer","createComputePipeline","layout","createPipelineLayout","bindGroupLayouts","compute","entryPoint","createBuffer","size","usage","GPUBufferUsage","UNIFORM","COPY_DST","STORAGE","COPY_SRC","VERTEX","createBindGroup","resource","label","byteLength","arrayStride","attributes","offset","shaderLocation","createRenderPipeline","vertex","buffers","fragment","targets","primitive","topology","stripIndexFormat","addEventListener","event","rect","getBoundingClientRect","clientX","left","clientY","top","mouseX","mouseY","dx","dy","preventDefault","oldZoom","zoomFactor","deltaY","ratio","OVERLAY_ID","OldModule","bundle","Module","moduleName","hot","data","hotData","_acceptCallbacks","_disposeCallbacks","accept","fn","dispose","checkedAssets","assetsToAccept","parent","isParcelRequire","WebSocket","hostname","protocol","ws","onmessage","JSON","parse","handled","assets","asset","isNew","didAccept","hmrAcceptCheck","global","parcelRequire","id","every","generated","js","clear","hmrApply","hmrAcceptRun","reload","close","onclose","removeErrorOverlay","error","message","stack","overlay","createErrorOverlay","appendChild","remove","createElement","stackTrace","innerText","getParents","modules","parents","k","dep","Array","isArray","Function","deps","cached","cache","some","cb"],"mappings":"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","file":"main.1f19ae8e.js","sourceRoot":"..\\src","sourcesContent":["(async () => {\n\n  const params = new URLSearchParams(location.search);\n  // URLからパラメータを取得する。なければデフォルト値を代入(例:***?balls=16000&min_radius=0.015&max_radius=0.02)\n  function parameter(name, def) {\n    if (!params.has(name)) return def;\n    return parseFloat(params.get(name));\n  }\n  // GPUが使用可能化どうか\n  if (!(\"gpu\" in navigator)) fatal(\"WebGPU not supported. Please enable it in about:flags in Chrome or in about:config in Firefox.\");\n\n  // GPUの仕様を確認する\n  const adapter = await navigator.gpu.requestAdapter();\n  if (!adapter) fatal(\"Couldn’t request WebGPU adapter.\");\n  const { maxBufferSize, maxStorageBufferBindingSize } = adapter.limits;\n  // 最大バッファサイズの確認\n  console.log(\"maxBufferSize= \",maxBufferSize);\n  console.log(\"maxStorageBufferBindingSize= \",maxStorageBufferBindingSize);\n\n  // GPUの制限を変更する\n  const device = await adapter.requestDevice({\n    requiredLimits: {\n      maxStorageBuffersPerShaderStage: 10, // stragebufferの上限を引き上げる(エラー例:The number of storage buffers (12) in the Compute stage exceeds the maximum per-stage limit (10))\n    },\n  });\n  if (!device) fatal(\"Couldn’t request WebGPU device.\");\n  console.log(\"device limit= \",device.limits);\n\n  // canvas要素に関するパラメータ\n  const canvas = document.getElementById(\"webgpuCanvas\");//document.querySelector(\"canvas\"); // 描画するキャンバス要素\n  const width = parameter(\"width\", 1000); // キャンバスの幅(px)\n  const height = parameter(\"height\", 500); // キャンバスの高さ(px)\n  canvas.width = width; // キャンバスの幅(px)\n  canvas.height = height; // キャンバスの高さ(px)\n  const ctx = canvas.getContext(\"webgpu\"); // \"webgpu\"コンテキストを取得\n  // キャンバスのサイズ設定（属性とスタイル両方を設定）\n  canvas.style.width = width + 'px';\n  canvas.style.height = height + 'px';\n  const widthLength = parameter(\"width_length\", 15.0); // canvas要素のwidthに対する実際の長さ(m)\n\n  // 線分要素に関するパラメータ\n  const NUM_LINES = 1; //parameter(\"line\", 1); // 線分数\n  const LINE_BUFFER_COUNT = 10; // 線分に対する必要な要素(位置、速度、...)\n  const LINE_BUFFER_SIZE = NUM_LINES * LINE_BUFFER_COUNT * Float32Array.BYTES_PER_ELEMENT; // 線分の配列に必要なバッファサイズ\n  const x1 = parameter(\"x1\", 4.0); // canvas要素のwidthに対する実際の長さ(m)\n  const y1 = parameter(\"y1\", 0.0); // canvas要素のwidthに対する実際の長さ(m)\n  const x2 = parameter(\"x2\", 4.0); // canvas要素のwidthに対する実際の長さ(m)\n  const y2 = parameter(\"y2\", 6.0); // canvas要素のwidthに対する実際の長さ(m)\n\n  // 粒子要素に関するパラメータ\n  const NUM_BALLS = parameter(\"balls\", 12000); // 粒子数\n  const BUFFER_COUNT = 8; // 粒子に対する必要な要素(位置、速度、...)\n  const BUFFER_SIZE = NUM_BALLS * BUFFER_COUNT * Float32Array.BYTES_PER_ELEMENT; // 粒子の配列に必要なバッファサイズ\n  const minRadius = clamp(parameter(\"min_radius\", 0.01), 0.01, 0.1); // 最小粒子半径\n  const maxRadius = clamp(parameter(\"max_radius\", 0.02), minRadius, 0.1); // 最大粒子半径\n\n  // 粒子を格納する格子に関するパラメータ\n  const spacing = 2 * 2 * maxRadius + 0.001; // 格子間隔(最大直径の2倍は境界で処理がうまくできない場合があるので、少し余裕を持たせる\n  const nx = Math.ceil(widthLength / spacing); // x方向の格子点数\n  const grid_size = Math.ceil(spacing / (2 * minRadius)) ** 2; // 格子ごとのサイズ\n  const GL_BUFFER_SIZE = nx * Math.ceil(nx * ctx.canvas.height / ctx.canvas.width) * grid_size * Uint32Array.BYTES_PER_ELEMENT; // 粒子iが接触する粒子jのインデックスを格納する配列に必要なバッファサイズ\n  const GL_ATOMIC_BUFFER_SIZE = nx * Math.ceil(nx * ctx.canvas.height / ctx.canvas.width) * Uint32Array.BYTES_PER_ELEMENT; // 粒子iが接触する粒子の数を格納する配列に必要なバッファサイズ\n  \n  const theta = 2 * Math.atan(minRadius / Math.sqrt(((minRadius + maxRadius) ** 2 - minRadius ** 2))); // 最大粒子径に接触する2つの最小粒子の最大粒子の中心からの角度\n  const maxContactParticleNumber = Math.ceil(2 * Math.PI / theta); // 最大半径の粒子の周りに接触できる最小半径の粒子の数(一応切り上げる)(2次元)\n  const EF_BUFFER_SIZE = (NUM_BALLS * (maxContactParticleNumber + 4 + NUM_LINES)) * 2 * Float32Array.BYTES_PER_ELEMENT; // 接触力を保存する配列に必要なバッファサイズ。*2はxとy, ＋4は上下左右の壁の分\n  const EF_INDEX_BUFFER_SIZE = (NUM_BALLS * (maxContactParticleNumber)) * Uint32Array.BYTES_PER_ELEMENT; // 接触力の相手の粒子のインデックスを保存するためのバッファサイズ \n\n  // その他のパラメータ  \n  let fps = 30.0; // フレームレート\n  let offsetX = 0;  // ズーム(拡大・縮小)に関するパラメータ\n  let offsetY = 0;  // ズーム(拡大・縮小)に関するパラメータ\n  let zoomValue = 1.0; // ズーム(拡大・縮小)に関するパラメータ\n  let colorMode = 0;  // カラーモード\n\n  canvas.style.cursor = \"grab\"; // デフォルトを grab に設定\n  let isDragging = false; // マウスのドラッグ判定\n  let lastMouseX = 0; // マウスのgrab位置Xの保存用\n  let lastMouseY = 0; // マウスのgrab位置Yの保存用\n  \n  const enableLineCheckbox = document.getElementById(\"enableLine\"); // チェックボックス\n  const overlayCanvas = document.getElementById(\"overlayCanvas\"); // overlay 用キャンバス\n  const modeRadioId = document.getElementById(\"modeId\"); // ラジオボタン(粒子番号)\n  const modeRadioVabs = document.getElementById(\"modeVabs\"); // ラジオボタン(速度(絶対値))\n  const startButton = document.getElementById(\"start\"); // スタートボタン\n  const resetButton = document.getElementById(\"reset\"); // リセットボタン\n  const stopButton = document.getElementById(\"stop\"); // スタートボタン\n  const resetViewButton = document.getElementById(\"reset_view\"); // 描画リセットボタン\n\n  // sceneバッファの初期化処理(zoomValueやcolorModeはグローバル変数で変更されることがある)\n  function initializeSceneBuffer() {\n    return new Float32Array([\n      ctx.canvas.width,\n      ctx.canvas.height,\n      widthLength,\n      fps,\n      minRadius,\n      maxRadius,\n      nx,\n      grid_size,\n      spacing,\n      NUM_BALLS,\n      maxContactParticleNumber,\n      // offsetX, offsetY を追加\n      offsetX,\n      offsetY,\n      // 最後にズーム係数\n      zoomValue,\n      // カラーモード\n      colorMode,\n    ])\n  }\n\n  // 初期化用のバッファデータを用意(粒子半径はランダムであるため、読み込み時に固定する)\n  // 各粒子の初期値を定義\n  let inputBalls = new Float32Array(new ArrayBuffer(BUFFER_SIZE));\n  for (let i = 0; i < NUM_BALLS; i++) {\n    inputBalls[i * BUFFER_COUNT + 0] = random(minRadius, maxRadius); //radius;\n    inputBalls[i * BUFFER_COUNT + 2] = maxRadius + (i) % (widthLength / (maxRadius * 2 * 4)) * maxRadius * 2;//random(0, ctx.canvas.width);\n    inputBalls[i * BUFFER_COUNT + 3] = maxRadius + Math.floor((i) / (widthLength / (maxRadius * 2 * 4))) * maxRadius * 2;//random(0, ctx.canvas.height);\n    inputBalls[i * BUFFER_COUNT + 4] = 0;\n    inputBalls[i * BUFFER_COUNT + 5] = 0;\n    inputBalls[i * BUFFER_COUNT + 6] = 0.0;\n    inputBalls[i * BUFFER_COUNT + 7] = 0.0;\n  }\n  // 粒子要素の初期化処理\n  function initializeInputBallsBuffer(){\n    return inputBalls;\n  }\n\n  // 線分要素の初期化処理\n  function initializeInputLinesBuffer() {\n    // 線分要素の配列\n    let inputLines = new Float32Array(new ArrayBuffer(LINE_BUFFER_SIZE)); //32bitは4byteなので、4の整数倍のバイト数にする\n    // 初期値の代入\n    for (let i = 0; i < NUM_LINES; i++) {\n      inputLines[i * LINE_BUFFER_COUNT + 0] = maxRadius; // 線分の厚さ\n      inputLines[i * LINE_BUFFER_COUNT + 1] = 1; // 線分が有効かどうかのフラグ\n      inputLines[i * LINE_BUFFER_COUNT + 2] = x1; // x1\n      inputLines[i * LINE_BUFFER_COUNT + 3] = y1; // y1\n      inputLines[i * LINE_BUFFER_COUNT + 4] = x2; // x2\n      inputLines[i * LINE_BUFFER_COUNT + 5] = y2; // y2\n      inputLines[i * LINE_BUFFER_COUNT + 6] = 0;//random(-1000, 1000); // 重心の速度x\n      inputLines[i * LINE_BUFFER_COUNT + 7] = 0;//random(-1000, 1000); // 重心の速度y\n      inputLines[i * LINE_BUFFER_COUNT + 8] = 90.0; // angle:角度\n      inputLines[i * LINE_BUFFER_COUNT + 9] = 0.0; // angular_velocity:角速度\n    }\n\n\n    // 線分の初期状態をチェックボックスに合わせる\n    const lineEnabled = enableLineCheckbox.checked;\n    for (let i = 0; i < NUM_LINES; i++) {\n      inputLines[i * LINE_BUFFER_COUNT + 1] = lineEnabled ? 1 : 0;\n    }\n    return inputLines;\n  }\n\n  console.log(\"最大接触粒子数= \", maxContactParticleNumber);\n  console.log(\"最小粒子半径= \", minRadius);\n  console.log(\"最大粒子半径= \", maxRadius);\n  console.log(\"粒子数= \", NUM_BALLS);\n  // console.log(\"線分数=\", NUM_LINES);\n  // console.log(\"x方向の格子数= \", nx);\n  // console.log(\"格子間隔= \", spacing);\n  // console.log(\"格子ごとのサイズ= \", grid_size);\n  // console.log(\"BUFFER_SIZE= \", BUFFER_SIZE);\n  // console.log(\"EF_BUFFER_SIZE= \", EF_BUFFER_SIZE);\n  // console.log(\"GL_ATOMIC_BUFFER_SIZE= \", GL_ATOMIC_BUFFER_SIZE);\n  console.log(\"Max buffer size= \", device.limits.maxBufferSize);\n\n\n  // 推奨のcanvasフォーマットを取得\n  const canvasFormat = navigator.gpu.getPreferredCanvasFormat();\n  // コンテキストに関連付ける\n  ctx.configure({\n    device: device, // 前で作成したWebGPUデバイスをキャンバスに関連付け\n    format: canvasFormat, // 先ほど取得した最適なピクセルフォーマットを指定\n  });\n\n  // エラー内容の表示\n  function fatal(msg) {\n    document.body.innerHTML = `<pre>${msg}</pre>`;\n    throw Error(msg);\n  }\n\n\n  \n\n  const module = device.createShaderModule({\n    code: `\n    struct Ball {\n      radius: f32,\n      padding: f32,\n      position: vec2<f32>,\n      velocity: vec2<f32>,\n      angle: f32,\n      anguler_velocity: f32,\n    }\n\n    @group(0) @binding(0)\n    var<storage, read_write> input: array<Ball>;\n\n    @group(0) @binding(1)\n    var<storage, read_write> output: array<Ball>;\n\n    struct EF {\n      resilience_force: vec2<f32>,\n    }\n\n    @group(0) @binding(2)\n    var<storage, read_write> ef_input: array<EF>; // 復元力\n\n\n    struct Scene {\n      width: f32, // canvasの幅(pixel)\n      height: f32, // canvasの高さ(pixel)\n      L: f32, // canvasの幅(m)\n      fps: f32, // フレームレート\n      minRadius: f32, // 粒子の最小半径(m)\n      maxRadius: f32, // 粒子の最大半径(m)\n      nx: f32, // x方向の格子点数\n      grid_size: f32, // 1グリッドあたりの最大要素数\n      spacing: f32, // 格子間隔\n      numBalls: u32, // 粒子数\n      maxContactParticleNumber: f32, // 最大接触粒子数\n    }\n\n    @group(0) @binding(3)\n    var<uniform> scene: Scene;\n\n \n    @group(0) @binding(4)\n    var<storage, read_write> gl_input: array<u32>;\n\n    @group(0) @binding(5)\n    var<storage, read_write> gl_output: array<u32>;\n\n    @group(0) @binding(6)\n    var<storage, read_write> gl_atomic : array<atomic<u32>>;\n\n    @group(0) @binding(7)\n    var<storage, read_write> ef_index_input: array<u32>; // 復元力の相手粒子のインデックス\n\n\n    struct Line {\n      thickness: f32,\n      isValid: u32,\n      position_1: vec2<f32>,\n      position_2: vec2<f32>,\n      velocity: vec2<f32>,\n      angle: f32,\n      anguler_velocity: f32,\n    }\n\n    @group(1) @binding(0)\n    var<storage, read_write> line_input: array<Line>;\n\n    @group(1) @binding(1)\n    var<storage, read_write> line_output: array<Line>;\n\n\n\n    const PI: f32 = 3.14159;                        // 円周率\n    // const TIME_STEP: f32 = 0.0016;                   // 時間刻み(s)\n    const E: f32 = 70e+4;                           // ヤング率(kN/m2) 例:70e+9\n    const v: f32 = 0.35;                            // ポアソン比\n    const k_n: f32 = 9.0e+6; //PI*E*(1-v)/(4*(1+v)*(1-2*v));  // 法線方向ばね定数(kN/m)\n    const k_s: f32 = 3.0e+6; //PI*E/(8*(1+v));                // 接線方向ばね定数(kN/m)\n    const c: f32 = 0.0;                             // みかけの粘着力(kN/m2)\n    const fai: f32 = 30.0;                           // 摩擦角(°)\n    const g: f32 = -9.81;                           // 重力加速度(m/s2)\n    const rho: f32 = 2.5e+3;                        // 密度(kg/m3)\n    const e_n: f32 = 1.0;                           // 法線方向はね返り係数\n    const e_s: f32 = 1.0;                           // 接線方向はね返り係数\n    const h: f32 = 0.1;                           // 係数\n    const maxContactParticleNumber: u32 = ${maxContactParticleNumber};      // 最大接触粒子数(配列の要素数を固定するためここで定義する)\n    const maxLineNumber: u32 = ${NUM_LINES}; // 最大線分数\n    \n\n    // eta(粘性係数)を求める(対粒子)\n    fn calculationEta(m_i: f32, m_j: f32) -> vec2<f32> {\n      let m_ij = 2* m_i * m_j / (m_i + m_j);\n      // let eta_n = -2*log(e_n)*sqrt( ( m_ij * k_n ) / ( pow(PI, 2) + pow(log(e_n), 2) ) );\n      // let eta_s = -2*log(e_s)*sqrt( ( m_ij * k_s ) / ( pow(PI, 2) + pow(log(e_s), 2) ) );\n      let eta_n = h*2*sqrt(m_ij*k_n);\n      let eta_s = h*2*sqrt(m_ij*k_s);\n      return vec2<f32>(2.0e+3, 1.0e+3); //vec2<f32>(eta_n, eta_s);\n    }\n\n    // eta(粘性係数)を求める(対壁)\n    fn calculationEtaWithWall(m_i: f32) -> vec2<f32> {\n      let m_ij = m_i;\n      // let eta_n = -2*log(e_n)*sqrt( ( m_ij * k_n ) / ( pow(PI, 2) + pow(log(e_n), 2) ) );\n      // let eta_s = -2*log(e_s)*sqrt( ( m_ij * k_s ) / ( pow(PI, 2) + pow(log(e_s), 2) ) );\n      let eta_n = h*2*sqrt(m_ij*k_n);\n      let eta_s = h*2*sqrt(m_ij*k_s);\n      return vec2<f32>(2.0e+3, 1.0e+3); //vec2<f32>(eta_n, eta_s);\n    }\n\n    // 衝突後の粒子同士の相対速度を求める\n    fn calculationVelocityAfterCollision(position_i: vec2<f32>, velocity_i: vec2<f32>, anguler_velocity_i: f32, radius_i: f32, position_j: vec2<f32>, velocity_j: vec2<f32>, anguler_velocity_j: f32, radius_j: f32) -> vec2<f32> {\n      let lx = position_j.x - position_i.x;\n      let ly = position_j.y - position_i.y;\n      let ld = sqrt(lx * lx + ly * ly);\n      let cos_a_ji = lx/ld;\n      let sin_a_ji = ly/ld;\n      let u_ji_n =  (velocity_i.x - velocity_j.x) * cos_a_ji + (velocity_i.y - velocity_j.y) * sin_a_ji;\n      let u_ji_s = -(velocity_i.x - velocity_j.x) * sin_a_ji + (velocity_i.y - velocity_j.y) * cos_a_ji + radius_i * anguler_velocity_i + radius_j * anguler_velocity_j;\n      return vec2<f32>(u_ji_n, u_ji_s);\n    }\n\n    // 衝突後の粒子同士の相対速度を求める(対壁)\n    fn calculationVelocityAfterCollisionWithWall(velocity_i: vec2<f32>, anguler_velocity_i: f32, radius_i: f32, alpha: f32) -> vec2<f32> {\n      let cos_a_ji = cos(radians(alpha));\n      let sin_a_ji = sin(radians(alpha));\n      let u_ji_n =  (velocity_i.x) * cos_a_ji + (velocity_i.y) * sin_a_ji;\n      let u_ji_s = -(velocity_i.x) * sin_a_ji + (velocity_i.y) * cos_a_ji + radius_i * anguler_velocity_i;\n      return vec2<f32>(u_ji_n, u_ji_s);\n    }\n\n    // 衝突後の粒子同士の相対速度を求める(対線分)\n    fn calculationVelocityAfterCollisionWithStackLine(position_i: vec2<f32>, velocity_i: vec2<f32>, anguler_velocity_i: f32, radius_i: f32, position_j: vec2<f32>, velocity_j: vec2<f32>, anguler_velocity_j: f32, radius_j: f32) -> vec2<f32> {\n      let lx = position_j.x - position_i.x;\n      let ly = position_j.y - position_i.y;\n      let ld = sqrt(lx * lx + ly * ly);\n      let cos_a_ji = lx/ld;\n      let sin_a_ji = ly/ld;\n      let u_ji_n =  (velocity_i.x - velocity_j.x) * cos_a_ji + (velocity_i.y - velocity_j.y) * sin_a_ji;\n      let u_ji_s = -(velocity_i.x - velocity_j.x) * sin_a_ji + (velocity_i.y - velocity_j.y) * cos_a_ji + radius_i * anguler_velocity_i + radius_j * anguler_velocity_j;\n      return vec2<f32>(u_ji_n, u_ji_s);\n    }\n\n\n    // 復元力を求める(x,yはn,s)\n    fn calculationRestoringForceNS(resilience_force: vec2<f32>, u_ji: vec2<f32>, k_n: f32, k_s: f32, timeStep: f32) -> vec2<f32> {\n      return vec2<f32>(resilience_force.x + k_n * u_ji.x * timeStep, resilience_force.y + k_s * u_ji.y * timeStep);\n    }\n\n\n    // 粘性力を求める(x,yはn,s)\n    fn calculationViscousForceNS(eta_n: f32, eta_s: f32, u_ji_n: f32, u_ji_s: f32) -> vec2<f32> {\n      return vec2<f32>(eta_n*u_ji_n, eta_s*u_ji_s);\n    }\n\n\n    // 弾性力を求める(x,yはn,s)\n    fn calculationElasticForceNS(resilience_force: vec2<f32>, viscous_force: vec2<f32>) -> vec2<f32> {\n      // 法線方向\n      var f_ji_n: f32;\n      if(resilience_force.x >= 0){\n        f_ji_n = resilience_force.x + viscous_force.x;\n      }else{\n        f_ji_n = 0.0;\n      }\n      // 接線方向(個別要素法による粒状体の力学的挙動に関する解析的研究(その1)より)\n      var f_ji_s: f32;\n      if(resilience_force.x < 0){\n        f_ji_s = 0.0;\n      }else if(abs(resilience_force.y) > tan(radians(fai))*resilience_force.x + c){\n        f_ji_s = (tan(radians(fai))*resilience_force.x + c)*sign(resilience_force.y);\n      }else{\n        f_ji_s = resilience_force.y + viscous_force.y;\n      }\n      return vec2<f32>(f_ji_n, f_ji_s);\n    }\n\n    // 弾性力をxy成分に分解する(引数のx,yはn,s)\n    fn calculationElasticForceXY(f_ji: vec2<f32>, position_i: vec2<f32>, position_j: vec2<f32>) -> vec2<f32> {\n      let lx = position_j.x - position_i.x;\n      let ly = position_j.y - position_i.y;\n      let ld = sqrt(lx * lx + ly * ly);\n      let cos_a_ji = lx/ld;\n      let sin_a_ji = ly/ld;\n      let f_ji_x = -f_ji.x * cos_a_ji + f_ji.y * sin_a_ji;\n      let f_ji_y = -f_ji.x * sin_a_ji - f_ji.y * cos_a_ji;\n      return vec2<f32>(f_ji_x, f_ji_y);\n    }\n\n    // 弾性力をxy成分に分解する(対壁)\n    fn calculationElasticForceXYWithWall(f_ji: vec2<f32>, alpha: f32) -> vec2<f32> {\n      let cos_a_ji = cos(radians(alpha));\n      let sin_a_ji = sin(radians(alpha));\n      let f_ji_x = -f_ji.x * cos_a_ji + f_ji.y * sin_a_ji;\n      let f_ji_y = -f_ji.x * sin_a_ji - f_ji.y * cos_a_ji;\n      return vec2<f32>(f_ji_x, f_ji_y);\n    }\n\n    // 粒子の加速度を求める\n    fn calculationAcceleration(m_i: f32, F_i: f32, G_i: f32) -> vec2<f32> {\n      return vec2<f32>(F_i/m_i, G_i/m_i + g);\n    }\n\n    // 粒子の速度を求める\n    fn calculationVelocity(velocity: vec2<f32>, acceleration: vec2<f32>, timeStep: f32) -> vec2<f32> {\n      return vec2<f32>(velocity.x + acceleration.x * timeStep, velocity.y + acceleration.y * timeStep);\n    }\n\n    // 粒子の位置を求める\n    fn calculationPosition(position: vec2<f32>, velocity: vec2<f32>, timeStep: f32) -> vec2<f32> {\n      return vec2<f32>(position.x + velocity.x * timeStep, position.y + velocity.y * timeStep);\n    }\n\n    // 粒子の角加速度を求める\n    fn calculationAngularAcceleration(I_i: f32, T_i: f32) -> f32 {\n      return f32(T_i/I_i);\n    }\n\n    // 粒子の角速度を求める\n    fn calculationAngularVelocity(angular_velocity: f32, angular_acceleration: f32, timeStep: f32) -> f32 {\n      return f32(angular_velocity + angular_acceleration * timeStep);\n    }\n\n    // 粒子の角度を求める\n    fn calculationAngle(angle: f32, angular_velocity: f32, timeStep: f32) -> f32 {\n      return f32(angle + angular_velocity * timeStep);\n    }\n\n    // 粒子と線分の接触判定用\n    // 接触判定のためのベクトルACを算出する\n    fn calVectorAC(line: Line, position: vec2<f32>) -> vec2<f32>{\n      return position - line.position_1;\n    }\n\n    // t'を算出する\n    fn calTDash(line: Line, AC:vec2<f32>) -> f32 {\n      // 線分ABのベクトル\n      let AB = line.position_2 - line.position_1;\n      // tを算出((w・v)/(v・v))=((AC・AB)/(AB・AB))\n      let t = dot(AC,AB)/dot(AB,AB);\n      // tを0と1の間に限定する\n      return clamp(t, 0, 1);\n    }\n\n    // 接触判定のためのベクトルAD(接触点)を算出する\n    fn calVectorD(line: Line, tdash: f32) -> vec2<f32>{\n      // 線分ABのベクトル\n      let AB = line.position_2 - line.position_1;\n      return vec2<f32>(line.position_1.x + tdash * AB.x, line.position_1.y + tdash * AB.y);\n    }\n\n\n    // 左下のマスのインデックス(インデックス要素数は抜きにして考える)(0より小さい時のことはあとで考える)\n    fn cal_1_1_index(nx: u32, i: u32) -> i32 {\n      return i32(i-nx-1);\n    }\n    // 真下のマスのインデックス(インデックス要素数は抜きにして考える)(0より小さい時のことはあとで考える)\n    fn cal_2_1_index(nx: u32, i: u32) -> i32 {\n      return i32(i-nx);\n    }\n    // 右下のマスのインデックス(インデックス要素数は抜きにして考える)(0より小さい時のことはあとで考える)\n    fn cal_3_1_index(nx: u32, i: u32) -> i32 {\n      return i32(i-nx+1);\n    }\n    // 左のマスのインデックス(インデックス要素数は抜きにして考える)(0より小さい時のことはあとで考える)\n    fn cal_1_2_index(nx: u32, i: u32) -> i32 {\n      return i32(i-1);\n    }\n    // 真ん中のマスのインデックス(インデックス要素数は抜きにして考える)(0より小さい時のことはあとで考える)\n    fn cal_2_2_index(nx: u32, i: u32) -> i32 {\n      return i32(i);\n    }\n    // 右のマスのインデックス(インデックス要素数は抜きにして考える)(超えた時のことはあとで考える)\n    fn cal_3_2_index(nx: u32, i: u32) -> i32 {\n      return i32(i+1);\n    }\n    // 左上のマスのインデックス(インデックス要素数は抜きにして考える)(超えた時のことはあとで考える)\n    fn cal_1_3_index(nx: u32, i: u32) -> i32 {\n      return i32(i+nx-1);\n    }\n    // 真上のマスのインデックス(インデックス要素数は抜きにして考える)(超えた時のことはあとで考える)\n    fn cal_2_3_index(nx: u32, i: u32) -> i32 {\n      return i32(i+nx);\n    }\n    // 右上のマスのインデックス(インデックス要素数は抜きにして考える)(超えた時のことはあとで考える)\n    fn cal_3_3_index(nx: u32, i: u32) -> i32 {\n      return i32(i+nx+1);\n    }\n\n    fn calculationOtherBallIndexArray(nx: u32, i: u32) -> array<i32, 9> {\n      var other_index_array: array<i32, 9>; // 判定を行う相手のインデックスを格納する配列(自分自身と周りの8マス=9マス)\n      other_index_array[0] = cal_1_1_index(nx, i);\n      other_index_array[1] = cal_2_1_index(nx, i);\n      other_index_array[2] = cal_3_1_index(nx, i);\n      other_index_array[3] = cal_1_2_index(nx, i);\n      other_index_array[4] = cal_2_2_index(nx, i);\n      other_index_array[5] = cal_3_2_index(nx, i);\n      other_index_array[6] = cal_1_3_index(nx, i);\n      other_index_array[7] = cal_2_3_index(nx, i);\n      other_index_array[8] = cal_3_3_index(nx, i);\n      return other_index_array;\n    }\n\n    @compute @workgroup_size(64)\n    fn main(\n      @builtin(global_invocation_id)\n      global_id : vec3<u32>,\n    ) {\n      let TIME_LOOP: u32 = 1;                   // 1fpsあたりのループ回数\n      let TIME_STEP: f32 = 1/scene.fps/400;   // 時間刻み(s)\n      let num_balls: u32 = arrayLength(&output);\n      // let num_lines: u32 = maxLineNumber;//arrayLength(&line_input);\n\n      let nx: u32 = u32(scene.nx); //u32(ceil(scene.L/scene.maxRadius)); // x方向の格子点数\n      let ny: u32 = u32(ceil(f32(nx) * scene.height/scene.width)); // y方向の格子点数\n      let spacing: f32 = scene.spacing; //scene.maxRadius*2+0.001; // 格子間隔\n      let grid_size: u32 = u32(scene.grid_size); //u32(ceil(scene.maxRadius/scene.minRadius)) * u32(ceil(scene.maxRadius/scene.minRadius)); // 1グリッドあたりの最大要素数\n\n\n\n      if(global_id.x >= num_balls) {\n        return;\n      }\n\n\n\n      var src_ball = input[global_id.x];\n      let dst_ball = &output[global_id.x];\n\n      (*dst_ball) = src_ball;\n\n      let src_gl_index:u32 = u32(floor(src_ball.position.y/spacing))*nx + u32(floor(src_ball.position.x/spacing)); // 今のインデックス要素数は抜きにして考える\n      let other_index_array: array<i32, 9> = calculationOtherBallIndexArray(nx, src_gl_index); // 判定を行う相手のインデックスの始まりを格納する配列(自分自身と周りの8マス=9マス)\n\n\n      // set const (奥行き1の円柱)\n      let m_i = pow(src_ball.radius, 2.0) * PI * rho;   // 粒子iの質量\n      let I_i = 0.5 * m_i * pow(src_ball.radius, 2.0);  // 粒子iの慣性モーメント\n\n\n      var F_i: f32 = 0.0;                               // 粒子iの弾性力の合力\n      var G_i: f32 = 0.0;                               // 粒子iのせん断力の合力\n      var T_i: f32 = 0.0;                               // 粒子iのトルクの合力\n\n\n      var ef_counter:u32 = 0; // 接触力の相手の数を保存しておく変数\n      var ef_output: array<EF, maxContactParticleNumber + 4 + maxLineNumber>; // 計算した接触力を保存する配列(+4は上下左右の壁)\n      var ef_index_output: array<u32, maxContactParticleNumber>; // 計算した接触粒子を保存する配列\n      for (var i = 0u; i < maxContactParticleNumber; i = i + 1u) {\n        ef_output[i].resilience_force = vec2<f32>(0.0, 0.0);\n        ef_index_output[i] = 0u;\n      }\n      ef_output[maxContactParticleNumber    ].resilience_force = vec2<f32>(0.0, 0.0);\n      ef_output[maxContactParticleNumber + 1].resilience_force = vec2<f32>(0.0, 0.0);\n      ef_output[maxContactParticleNumber + 2].resilience_force = vec2<f32>(0.0, 0.0);\n      ef_output[maxContactParticleNumber + 3].resilience_force = vec2<f32>(0.0, 0.0);\n      // 線分の数ループ\n      for (var i = 0u; i < maxLineNumber; i = i + 1u) {\n        ef_output[maxContactParticleNumber + 4 + i].resilience_force = vec2<f32>(0.0, 0.0);\n      }\n\n\n\n      // Ball/Ball collision\n      // マスごとにループ\n      for(var j = 0; j < 9; j++) {\n        // 格子点が存在しない場合はスキップ\n        if(other_index_array[j] < 0 || other_index_array[j] >= i32(nx)*i32(ny)) {\n          continue;\n        }\n        // gl_inputの対象インデックスのループ\n        for(var k = other_index_array[j]*i32(grid_size); k < other_index_array[j]*i32(grid_size)+i32(grid_size); k++) {\n          \n          // 0は初期値なのでスキップ\n          if(gl_input[u32(k)] == 0) {\n            continue;\n          }\n          // iを算出する\n          var i = gl_input[u32(k)] - 1; // 登録の時に+1しているので-1する(配列の中で0はnullの意味で使用するため)\n\n\n\n\n        // for(var i = 0; i < num_balls; i++) {\n          // 自分自身の場合はスキップ\n          if(i == global_id.x) {\n            continue;\n          }\n\n  \n          var other_ball = input[i];\n          let n = src_ball.position - other_ball.position;\n          let distance = length(n);\n          if(distance >= src_ball.radius + other_ball.radius) {\n            // (*ef_dst).resilience_force = vec2<f32>(0,0); // 復元力を0にする\n            // 現状では終わってから同期する\n            // ef_input[ef_index_ij] = (*ef_dst);\n            continue;\n          }\n\n\n          // 接触力の相手のインデックスを保存しておく(登録時は+1しておく) \n          ef_index_output[ef_counter] = i + 1;\n          var ef_src: EF = EF(vec2<f32>(0.0, 0.0));\n          // 前の相手iに対する接触力を見つける\n          for(var l:u32 = 0; l < maxContactParticleNumber; l++) {\n            // もし1ステップ前の接触力のインデックス配列にiと同じインデックスがあれば、接触力を継承する。なければ初めて接触下として、0のままにする。\n            if(ef_index_input[global_id.x*maxContactParticleNumber + l] == i + 1){\n              ef_src.resilience_force = ef_input[global_id.x*(maxContactParticleNumber + 4 + maxLineNumber) + l].resilience_force;\n              break;\n            }\n          }\n\n\n          let other_mass = pow(other_ball.radius, 2.0) * PI * rho; // 質量;\n  \n          // eta(粘性係数)を求める\n          let eta_ij = calculationEta(m_i, other_mass);\n          // 衝突後の粒子同士の相対速度を求める\n          let u_ji = calculationVelocityAfterCollision(src_ball.position, src_ball.velocity, src_ball.anguler_velocity, src_ball.radius, other_ball.position, other_ball.velocity, other_ball.anguler_velocity, other_ball.radius);\n          // 復元力を求める\n          ef_output[ef_counter].resilience_force = calculationRestoringForceNS(ef_src.resilience_force, u_ji, k_n, k_s, TIME_STEP);\n          // 粘性力を求める\n          let viscous_force = calculationViscousForceNS(eta_ij.x, eta_ij.y, u_ji.x, u_ji.y);\n          // 弾性力を求める\n          let elastic_force_ns = calculationElasticForceNS(ef_output[ef_counter].resilience_force, viscous_force);\n          // 弾性力をxy成分に分解する\n          let elastic_force_xy = calculationElasticForceXY(elastic_force_ns, src_ball.position, other_ball.position);\n          // 合力を増加させる\n          F_i += elastic_force_xy.x;\n          G_i += elastic_force_xy.y;\n          T_i += - elastic_force_ns.y * src_ball.radius;\n  \n          // 接触相手のカウンターを一つ増やす\n          ef_counter += 1; \n        }\n      }\n\n\n      // Ball/Wall collision\n      // 左の壁\n      if((*dst_ball).position.x - (*dst_ball).radius < 0.) {\n        // 復元力のインデックスを求める(自分のインデックスの最後+1)\n        let ef_index_ij = global_id.x*(maxContactParticleNumber + 4 + maxLineNumber) + maxContactParticleNumber;\n        var ef_src = ef_input[ef_index_ij];\n\n        let alpha = 180.0; // 左なので180°\n\n        // eta(粘性係数)を求める(対壁)\n        let eta_ij = calculationEtaWithWall(m_i);\n        // 衝突後の粒子同士の相対速度を求める\n        let u_ji = calculationVelocityAfterCollisionWithWall(src_ball.velocity, src_ball.anguler_velocity, src_ball.radius, alpha);\n        // 復元力を求める\n        ef_output[maxContactParticleNumber].resilience_force = calculationRestoringForceNS(ef_src.resilience_force, u_ji, k_n, k_s, TIME_STEP);\n        // 粘性力を求める\n        let viscous_force = calculationViscousForceNS(eta_ij.x, eta_ij.y, u_ji.x, u_ji.y);\n        // 弾性力を求める\n        let elastic_force_ns = calculationElasticForceNS(ef_output[maxContactParticleNumber].resilience_force, viscous_force);\n        // 弾性力をxy成分に分解する\n        let elastic_force_xy = calculationElasticForceXYWithWall(elastic_force_ns, alpha);\n        // 合力を増加させる\n        F_i += elastic_force_xy.x;\n        G_i += elastic_force_xy.y;\n        T_i += - elastic_force_ns.y * src_ball.radius;\n\n      }else{\n\n        ef_output[maxContactParticleNumber].resilience_force = vec2<f32>(0,0); // 復元力を0にする\n\n      }\n\n      // 下の壁\n      if((*dst_ball).position.y - (*dst_ball).radius < 0.) {\n        // 復元力のインデックスを求める(自分のインデックスの最後+1)\n        let ef_index_ij = global_id.x*(maxContactParticleNumber + 4 + maxLineNumber) + maxContactParticleNumber + 1;\n        var ef_src = ef_input[ef_index_ij];\n\n\n        let alpha = 270.0; // 下なので270°\n\n        // eta(粘性係数)を求める(対壁)\n        let eta_ij = calculationEtaWithWall(m_i);\n        // 衝突後の粒子同士の相対速度を求める\n        let u_ji = calculationVelocityAfterCollisionWithWall(src_ball.velocity, src_ball.anguler_velocity, src_ball.radius, alpha);\n        // 復元力を求める\n        ef_output[maxContactParticleNumber + 1].resilience_force = calculationRestoringForceNS(ef_src.resilience_force, u_ji, k_n, k_s, TIME_STEP);\n        // 粘性力を求める\n        let viscous_force = calculationViscousForceNS(eta_ij.x, eta_ij.y, u_ji.x, u_ji.y);\n        // 弾性力を求める\n        let elastic_force_ns = calculationElasticForceNS(ef_output[maxContactParticleNumber + 1].resilience_force, viscous_force);\n        // 弾性力をxy成分に分解する\n        let elastic_force_xy = calculationElasticForceXYWithWall(elastic_force_ns, alpha);\n        // 合力を増加させる\n        F_i += elastic_force_xy.x;\n        G_i += elastic_force_xy.y;\n        T_i += - elastic_force_ns.y * src_ball.radius;\n\n\n      }else{\n\n        ef_output[maxContactParticleNumber + 1].resilience_force = vec2<f32>(0,0); // 復元力を0にする\n\n      }\n\n      // 右の壁\n      if((*dst_ball).position.x + (*dst_ball).radius >= scene.L) {\n        // 復元力のインデックスを求める(自分のインデックスの最後+1)\n        let ef_index_ij = global_id.x*(maxContactParticleNumber + 4 + maxLineNumber) + maxContactParticleNumber + 2;\n        var ef_src = ef_input[ef_index_ij];\n\n        let alpha = 0.0; // 右なので0°\n\n        // eta(粘性係数)を求める(対壁)\n        let eta_ij = calculationEtaWithWall(m_i);\n        // 衝突後の粒子同士の相対速度を求める\n        let u_ji = calculationVelocityAfterCollisionWithWall(src_ball.velocity, src_ball.anguler_velocity, src_ball.radius, alpha);\n        // 復元力を求める\n        ef_output[maxContactParticleNumber + 2].resilience_force = calculationRestoringForceNS(ef_src.resilience_force, u_ji, k_n, k_s, TIME_STEP);\n        // 粘性力を求める\n        let viscous_force = calculationViscousForceNS(eta_ij.x, eta_ij.y, u_ji.x, u_ji.y);\n        // 弾性力を求める\n        let elastic_force_ns = calculationElasticForceNS(ef_output[maxContactParticleNumber + 2].resilience_force, viscous_force);\n        // 弾性力をxy成分に分解する\n        let elastic_force_xy = calculationElasticForceXYWithWall(elastic_force_ns, alpha);\n        // 合力を増加させる\n        F_i += elastic_force_xy.x;\n        G_i += elastic_force_xy.y;\n        T_i += - elastic_force_ns.y * src_ball.radius;\n\n \n      }else{\n\n        ef_output[maxContactParticleNumber + 2].resilience_force = vec2<f32>(0,0); // 復元力を0にする\n\n      }\n\n      // 上の壁\n      if((*dst_ball).position.y + (*dst_ball).radius >= scene.L/scene.width*scene.height) {\n\n        // 復元力のインデックスを求める(自分のインデックスの最後+1)\n        let ef_index_ij = global_id.x*(maxContactParticleNumber + 4 + maxLineNumber) + maxContactParticleNumber + 3;\n        var ef_src = ef_input[ef_index_ij];\n\n        let alpha = 90.0; // 上なので90°\n\n        // eta(粘性係数)を求める(対壁)\n        let eta_ij = calculationEtaWithWall(m_i);\n        // 衝突後の粒子同士の相対速度を求める\n        let u_ji = calculationVelocityAfterCollisionWithWall(src_ball.velocity, src_ball.anguler_velocity, src_ball.radius, alpha);\n        // 復元力を求める\n        ef_output[maxContactParticleNumber + 3].resilience_force = calculationRestoringForceNS(ef_src.resilience_force, u_ji, k_n, k_s, TIME_STEP);\n        // 粘性力を求める\n        let viscous_force = calculationViscousForceNS(eta_ij.x, eta_ij.y, u_ji.x, u_ji.y);\n        // 弾性力を求める\n        let elastic_force_ns = calculationElasticForceNS(ef_output[maxContactParticleNumber + 3].resilience_force, viscous_force);\n        // 弾性力をxy成分に分解する\n        let elastic_force_xy = calculationElasticForceXYWithWall(elastic_force_ns, alpha);\n        // 合力を増加させる\n        F_i += elastic_force_xy.x;\n        G_i += elastic_force_xy.y;\n        T_i += - elastic_force_ns.y * src_ball.radius;\n\n      }else{\n\n        ef_output[maxContactParticleNumber + 3].resilience_force = vec2<f32>(0,0); // 復元力を0にする\n\n      }\n\n\n      // 線分要素の計算\n      // 線分でループする\n      for(var l = 0u; l < maxLineNumber; l = l + 1u) {\n        // 線分が有効でないときは次のループへ\n        if(line_input[l].isValid == 0u){\n          continue;\n        }\n        let AC = calVectorAC(line_input[l], src_ball.position);\n        let tdash = calTDash(line_input[l], AC);\n        let D = calVectorD(line_input[l], tdash);\n        // 接触判定              \n        let distance = length(src_ball.position - D);\n        // 接触しないとき\n        if(distance >= src_ball.radius + line_input[l].thickness) {\n          ef_output[maxContactParticleNumber + 4 + l].resilience_force = vec2<f32>(0,0); // 復元力を0にする\n          continue;\n        }\n        // 復元力のインデックスを求める(自分のインデックスの最後+1)\n        let ef_index_ij = global_id.x*(maxContactParticleNumber + 4 + maxLineNumber) + maxContactParticleNumber + 4 + l;\n        var ef_src = ef_input[ef_index_ij];\n\n\n        // eta(粘性係数)を求める\n        let eta_ij = calculationEtaWithWall(m_i);\n        // 衝突後の粒子同士の相対速度を求める\n        let u_ji = calculationVelocityAfterCollisionWithStackLine(src_ball.position, src_ball.velocity, src_ball.anguler_velocity, src_ball.radius, D, vec2<f32>(0,0), 0, line_input[l].thickness);\n        // 復元力を求める\n        ef_output[maxContactParticleNumber + 4 + l].resilience_force = calculationRestoringForceNS(ef_src.resilience_force, u_ji, k_n, k_s, TIME_STEP);\n        // 粘性力を求める\n        let viscous_force = calculationViscousForceNS(eta_ij.x, eta_ij.y, u_ji.x, u_ji.y);\n        // 弾性力を求める\n        let elastic_force_ns = calculationElasticForceNS(ef_output[maxContactParticleNumber + 4 + l].resilience_force, viscous_force);\n        // 弾性力をxy成分に分解する\n        let elastic_force_xy = calculationElasticForceXY(elastic_force_ns, src_ball.position, D);\n        // 合力を増加させる\n        F_i += elastic_force_xy.x;\n        G_i += elastic_force_xy.y;\n        T_i += - elastic_force_ns.y * src_ball.radius;\n\n\n      }\n\n\n      // END 線分要素の計算\n\n\n      // 粒子の加速度を求める\n      let acceleration = calculationAcceleration(m_i, F_i, G_i);\n      // 粒子の速度を求める\n      (*dst_ball).velocity = calculationVelocity(src_ball.velocity, acceleration, TIME_STEP);\n      // 粒子の位置を求める\n      (*dst_ball).position = calculationPosition(src_ball.position, (*dst_ball).velocity, TIME_STEP);\n      // 粒子の角加速度を求める\n      let angular_acceleration = calculationAngularAcceleration(I_i, T_i);\n      // 粒子の角速度を求める\n      (*dst_ball).anguler_velocity = calculationAngularVelocity(src_ball.anguler_velocity, angular_acceleration, TIME_STEP);\n      // 粒子の角度を求める\n      (*dst_ball).angle = calculationAngle(src_ball.angle, (*dst_ball).anguler_velocity, TIME_STEP);\n\n\n      // 異なるworkgroup間では現在同期できないのでforloopは使えない\n\n      let gl_index:u32 = u32(floor((*dst_ball).position.y/spacing))*nx + u32(floor((*dst_ball).position.x/spacing));\n\n      var c = atomicAdd(&gl_atomic[gl_index], u32(1));//加算(各関数は次の手順をアトミックに実行します。\n      // 1.atomic_ptrが指す元の値をロードします, \n      // 2.値vを使用して関数名から演算 (例: max) を実行することにより、新しい値を取得します。\n      // 3.atomic_ptrを使用して新しい値を保存します。\n      // 各関数は、アトミック オブジェクトに格納されている元の値を返します。)\n\n      gl_output[gl_index*grid_size+c] = global_id.x+1; // 初期化で0にしているのでindex=0と初期化がかぶらないように+1する\n\n      \n      // 接触力を次のループのために保存する\n      for(var l:u32 = 0; l < maxContactParticleNumber; l++) {\n          // 接触力を代入する\n          ef_input[global_id.x*(maxContactParticleNumber + 4 + maxLineNumber) + l] = ef_output[l];\n          // 接触力のインデックスを代入する\n          ef_index_input[global_id.x*maxContactParticleNumber + l] =  ef_index_output[l];\n      }\n      // 壁の分\n      ef_input[global_id.x*(maxContactParticleNumber + 4 + maxLineNumber) + maxContactParticleNumber]     = ef_output[maxContactParticleNumber];\n      ef_input[global_id.x*(maxContactParticleNumber + 4 + maxLineNumber) + maxContactParticleNumber + 1] = ef_output[maxContactParticleNumber + 1];\n      ef_input[global_id.x*(maxContactParticleNumber + 4 + maxLineNumber) + maxContactParticleNumber + 2] = ef_output[maxContactParticleNumber + 2];\n      ef_input[global_id.x*(maxContactParticleNumber + 4 + maxLineNumber) + maxContactParticleNumber + 3] = ef_output[maxContactParticleNumber + 3];\n\n      // 線分の分\n      for(var l:u32 = 0; l < maxLineNumber; l++) {\n          // 接触力を代入する\n          ef_input[global_id.x*(maxContactParticleNumber + 4 + maxLineNumber) + maxContactParticleNumber + 4 + l] = ef_output[maxContactParticleNumber + 4 + l];\n      }\n    }\n  `,\n  });\n\n  const bindGroupLayout1 = device.createBindGroupLayout({\n    entries: [\n      {\n        binding: 0,\n        visibility: GPUShaderStage.COMPUTE,\n        buffer: {\n          type: \"storage\",\n        },\n      },\n      {\n        binding: 1,\n        visibility: GPUShaderStage.COMPUTE,\n        buffer: {\n          type: \"storage\",\n        },\n      },\n      {\n        binding: 2,\n        visibility: GPUShaderStage.COMPUTE,\n        buffer: {\n          type: \"storage\",\n        },\n      },\n      {\n        binding: 3,\n        visibility: GPUShaderStage.COMPUTE,\n        buffer: {\n          type: \"uniform\",\n        },\n      },\n      {\n        binding: 4,\n        visibility: GPUShaderStage.COMPUTE,\n        buffer: {\n          type: \"storage\",\n        },\n      },\n      {\n        binding: 5,\n        visibility: GPUShaderStage.COMPUTE,\n        buffer: {\n          type: \"storage\",\n        },\n      },\n      {\n        binding: 6,\n        visibility: GPUShaderStage.COMPUTE,\n        buffer: {\n          type: \"storage\",\n        },\n      },\n      {\n        binding: 7,\n        visibility: GPUShaderStage.COMPUTE,\n        buffer: {\n          type: \"storage\",\n        },\n      },\n    ],\n  });\n\n  const bindGroupLayout2 = device.createBindGroupLayout({\n    entries: [\n      {\n        binding: 0,\n        visibility: GPUShaderStage.COMPUTE,\n        buffer: {\n          type: \"storage\",\n        },\n      },\n      {\n        binding: 1,\n        visibility: GPUShaderStage.COMPUTE,\n        buffer: {\n          type: \"storage\",\n        },\n      },\n    ],\n  });\n\n  const pipeline = device.createComputePipeline({\n    layout: device.createPipelineLayout({\n      bindGroupLayouts: [bindGroupLayout1, bindGroupLayout2],\n    }),\n    compute: {\n      module,\n      entryPoint: \"main\",\n    },\n  });\n\n  // --- ③ バッファサイズを16バイト境界＝(14×4=56 →64など)に調整し、UNIFORM ---\n  const scene = device.createBuffer({\n    size: 16 * Float32Array.BYTES_PER_ELEMENT, // ★ 16バイトアライン推奨\n    usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST, \n  });\n\n  const input = device.createBuffer({\n    size: BUFFER_SIZE,\n    usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_DST,\n  });\n\n  const output = device.createBuffer({\n    size: BUFFER_SIZE,\n    usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC | GPUBufferUsage.VERTEX,\n  });\n\n  const ef_input = device.createBuffer({\n    size: EF_BUFFER_SIZE,\n    usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_DST,\n  });\n\n  const ef_index_input = device.createBuffer({\n    size: EF_INDEX_BUFFER_SIZE,\n    usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_DST,\n  });\n\n  const gl_input = device.createBuffer({\n    size: GL_BUFFER_SIZE,\n    usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_DST,\n  });\n\n  const gl_output = device.createBuffer({\n    size: GL_BUFFER_SIZE,\n    usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST,\n  });\n\n  const gl_atomic = device.createBuffer({\n    size: GL_ATOMIC_BUFFER_SIZE,\n    usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST,\n  });\n\n  const line_input = device.createBuffer({\n    size: LINE_BUFFER_SIZE,\n    usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_DST,\n  });\n\n  const line_output = device.createBuffer({\n    size: LINE_BUFFER_SIZE,\n    usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC | GPUBufferUsage.VERTEX | GPUBufferUsage.COPY_DST,\n  });\n\n  const bindGroup1 = device.createBindGroup({\n    layout: bindGroupLayout1,\n    entries: [\n      {\n        binding: 0,\n        resource: {\n          buffer: input,\n        },\n      },\n      {\n        binding: 1,\n        resource: {\n          buffer: output,\n        },\n      },\n      {\n        binding: 2,\n        resource: {\n          buffer: ef_input,\n        },\n      },\n      {\n        binding: 3,\n        resource: {\n          buffer: scene,\n        },\n      },\n      {\n        binding: 4,\n        resource: {\n          buffer: gl_input,\n        },\n      },\n      {\n        binding: 5,\n        resource: {\n          buffer: gl_output,\n        },\n      },\n      {\n        binding: 6,\n        resource: {\n          buffer: gl_atomic,\n        },\n      },\n      {\n        binding: 7,\n        resource: {\n          buffer: ef_index_input,\n        },\n      },\n    ],\n  });\n\n\n  const bindGroup2 = device.createBindGroup({\n    layout: bindGroupLayout2,\n    entries: [\n      {\n        binding: 0,\n        resource: {\n          buffer: line_input,\n        },\n      },\n      {\n        binding: 1,\n        resource: {\n          buffer: line_output,\n        },\n      },\n    ],\n  });\n\n\n  // START Geometry Shader\n\n  // 粒子要素の描画関係\n\n  // シェーダーモジュール\n  const cellShaderModule = device.createShaderModule({\n    label: \"Cell shader\",\n    code: `\n    // Your shader code will go here\n\n    struct Ball {\n      radius: f32,\n      padding: f32,\n      position: vec2<f32>,\n      velocity: vec2<f32>,\n      angle: f32,\n      anguler_velocity: f32,\n    }\n    @group(0) @binding(0)\n    var<storage, read> output: array<Ball>;\n\n    struct VertexOutput {\n      @builtin(position) pos: vec4f,\n      @location(0) cellColor: vec4f, // New line!\n    };\n\n    struct Scene {\n      width: f32, // canvasの幅(pixel)\n      height: f32, // canvasの高さ(pixel)\n      L: f32, // canvasの幅(m)\n      fps: f32, // フレームレート\n      minRadius: f32, // 粒子の最小半径(m)\n      maxRadius: f32, // 粒子の最大半径(m)\n      nx: f32, // x方向の格子点数\n      grid_size: f32, // 1グリッドあたりの最大要素数\n      spacing: f32, // 格子間隔\n      numBalls: f32, // 粒子数\n      maxContactParticleNumber: f32, // 最大接触粒子数\n      offsetX: f32,               // カメラ中心 X\n      offsetY: f32,               // カメラ中心 Y\n      zoomValue: f32, // ズーム係数\n      colorMode: f32, // カラーモード\n    }\n\n    @group(0) @binding(1)\n    var<uniform> scene: Scene;\n\n    // 頂点シェーダーを定義する\n    @vertex\n    fn vertexMain(@builtin(vertex_index) vertex_index : u32, @builtin(instance_index) instance_index: u32, @location(0) pos: vec2<f32>) ->\n    VertexOutput {\n      var vertexOutput: VertexOutput;\n      let widthByL: f32 = scene.width/scene.L; \n      \n      // パーティクル中心 (ピクセル座標)(左下基準)\n      let cx = output[instance_index].position.x * widthByL;\n      let cy = output[instance_index].position.y * widthByL;\n      \n      // 回転\n      let rx = cos(radians(output[instance_index].angle)) * pos.x\n            - sin(radians(output[instance_index].angle)) * pos.y;\n      let ry = sin(radians(output[instance_index].angle)) * pos.x\n            + cos(radians(output[instance_index].angle)) * pos.y;\n\n      // 中心オフセット+NDC変換\n      // offsetX, offsetY はピクセル単位\n      let ndcX = ((cx - scene.offsetX )  + rx * output[instance_index].radius * widthByL)\n                / scene.width * 2.0 * scene.zoomValue - 1.0;\n      let ndcY = ((cy - scene.offsetY )  + ry * output[instance_index].radius * widthByL)\n                / scene.height * 2.0 * scene.zoomValue - 1.0;\n\n      // ズーム係数を適用\n      vertexOutput.pos = vec4f(ndcX, ndcY, 0.0, 1.0);\n\n      // 粒子番号の場合\n      if(u32(scene.colorMode) == 0){\n        if(instance_index < u32(0.25*scene.numBalls)){\n          // vertexOutput.cell = 0.25;\n          vertexOutput.cellColor = vec4f(0.25, 0, 1.0, 1);\n        }else if(instance_index < u32(0.5*scene.numBalls)){\n          vertexOutput.cellColor = vec4f(0.5, 0, 1.0, 1);\n        }else if(instance_index < u32(0.75*scene.numBalls)){\n          vertexOutput.cellColor = vec4f(0.75, 0, 1.0, 1);\n        }else{\n          vertexOutput.cellColor = vec4f(1.0, 0, 1.0, 1);\n        }\n      }else if(u32(scene.colorMode) == 1){\n        let velocity = length(output[instance_index].velocity);\n        vertexOutput.cellColor = vec4f(velocity, 0, 100, 1);\n      }\n\n      return vertexOutput; // (X, Y, Z, W) w の値は、3 次元同次座標系における頂点の 4 つ目の要素,3D グラフィックのレンダリングでよく行われる 4x4 行列を使用した計算が可能になる\n    }\n\n    // フラグメント シェーダーを定義する(戻り値は0～1)\n    @fragment\n    fn fragmentMain(input: VertexOutput) -> @location(0) vec4f {\n\n      return input.cellColor; // (Red, Green, Blue, Alpha)\n    }   \n  `\n  });\n\n\n  // 頂点を定義する\n  function createCircleVertices(centerX, centerY, radius, segments) {\n    const vertices = [];\n    for (let i = 1; i < segments; i++) { // 一つ欠けさせるために0番目はスキップ\n      const theta1 = (i / segments) * 2.0 * Math.PI;\n      const theta2 = ((i + 1) / segments) * 2.0 * Math.PI;\n      const x1 = centerX + radius * Math.cos(theta1);\n      const y1 = centerY + radius * Math.sin(theta1);\n      const x2 = centerX + radius * Math.cos(theta2);\n      const y2 = centerY + radius * Math.sin(theta2);\n      // 頂点データに中心点と円周上の点を追加\n      vertices.push(centerX, centerY, x1, y1, x2, y2);\n    }\n    return new Float32Array(vertices);\n  }\n  // 頂点バッファを作成する\n  const vertices = createCircleVertices(0, 0, 1, 10);\n  // バッファの作成\n  const vertexBuffer = device.createBuffer({\n    label: \"Cell vertices\",\n    size: vertices.byteLength,\n    usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_DST | GPUBufferUsage.VERTEX,\n  });\n  // END 円\n\n  // 頂点データをバッファのメモリにコピーする\n  device.queue.writeBuffer(vertexBuffer, /*bufferOffset=*/0, vertices);\n\n  // 頂点のレイアウトを定義する\n  // vertexBufferLayoutを作成する\n  const vertexBufferLayout = {\n    arrayStride: 8,\n    attributes: [{\n      format: \"float32x2\",\n      offset: 0,\n      shaderLocation: 0, // Position, see vertex shader\n    }],\n  };\n\n  const renderBindGroupLayout = device.createBindGroupLayout({\n    entries: [\n      {\n        binding: 0,\n        visibility: GPUShaderStage.VERTEX,\n        buffer: { type: \"read-only-storage\" },\n      },\n      {\n        binding: 1,\n        visibility: GPUShaderStage.VERTEX,\n        buffer: {\n          type: \"uniform\",\n        },\n      },\n    ],\n  });\n\n\n\n  const renderBindGroup = device.createBindGroup({\n    label: \"Cell renderer bind group\",\n    layout: renderBindGroupLayout,\n    entries: [\n      {\n        binding: 0,\n        resource: {\n          buffer: output\n        }\n      },\n      {\n        binding: 1,\n        resource: {\n          buffer: scene,\n        },\n      },\n    ],\n  });\n\n  const renderPipelineLayout = device.createPipelineLayout({\n    label: \"Cell Pipeline Layout\",\n    bindGroupLayouts: [renderBindGroupLayout],\n  });\n\n  // レンダリング パイプラインを作成する\n  const cellPipeline = device.createRenderPipeline({\n    label: \"Cell pipeline\",\n    layout: renderPipelineLayout,\n    vertex: {\n      module: cellShaderModule,\n      entryPoint: \"vertexMain\",\n      buffers: [vertexBufferLayout]\n    },\n    fragment: {\n      module: cellShaderModule,\n      entryPoint: \"fragmentMain\",\n      targets: [{\n        format: canvasFormat\n      }]\n    }\n  });\n\n  // END 粒子要素の描画関係\n\n\n  // 線分要素の描画関係\n\n  // まずlineShaderModuleを定義（まだ存在しない場合）\n  const lineShaderModule = device.createShaderModule({\n    label: \"Line shader\",\n    code: `\n      struct Line {\n        thickness: f32,\n        isValid: u32,\n        position_1: vec2<f32>,\n        position_2: vec2<f32>,\n        velocity: vec2<f32>,\n        angle: f32,\n        anguler_velocity: f32,\n      }\n      \n      @group(0) @binding(0)\n      var<storage, read> line_output: array<Line>;\n      \n      struct Scene {\n        width: f32, height: f32, L: f32, fps: f32,\n        minRadius: f32, maxRadius: f32, nx: f32, grid_size: f32,\n        spacing: f32, numBalls: u32, maxContactParticleNumber: f32,\n        offsetX: f32, offsetY: f32, zoomValue: f32, colorMode: f32,\n      }\n      \n      @group(0) @binding(1)\n      var<uniform> scene: Scene;\n      \n      struct VertexOutput {\n        @builtin(position) pos: vec4f,\n        @location(0) color: vec4f,\n      };\n      \n      @vertex\n      fn vertexMain(@location(0) pos: vec2<f32>, @builtin(vertex_index) vertexIndex: u32) -> VertexOutput {\n        var output: VertexOutput;\n        let widthByL: f32 = scene.width/scene.L;\n        \n        // 座標を決定（0と1のインデックスで線分の両端を取得）\n        let lineIndex = vertexIndex / 2;\n        let pointIndex = vertexIndex % 2;\n        \n              \n        // isValidをチェック\n        let isVisible: bool = line_output[lineIndex].isValid != 0u;\n\n        // select(falseの場合の値, trueの場合の値, 条件式)\n        // 線分は常に2つの頂点（始点と終点）から構成されます\n        // pointIndexは処理中の頂点が線分のどちら側かを示します（0か1）\n        // GPUでは条件分岐（if文）を避けて、このselectのような関数を使うことでパフォーマンスが向上します\n        let position = select(\n          line_output[lineIndex].position_1,\n          line_output[lineIndex].position_2,\n          pointIndex == 1\n        );\n        \n        // NDC座標に変換\n        let ndcX = ((position.x * widthByL) - scene.offsetX) \n                  / scene.width * 2.0 * scene.zoomValue - 1.0;\n        let ndcY = ((position.y * widthByL) - scene.offsetY) \n                  / scene.height * 2.0 * scene.zoomValue - 1.0;\n        \n        // isValid が 0 の場合は線分を画面外に配置（実質的に非表示にする）\n        if (isVisible) {\n          output.pos = vec4f(ndcX, ndcY, 0.0, 1.0);\n          output.color = vec4f(1.0, 0.5, 0.0, 1.0); // オレンジ色\n        } else {\n          // 画面外に配置（クリッピングされる）\n          output.pos = vec4f(0.0, 0.0, 10.0, 0.0); \n          output.color = vec4f(0.0, 0.0, 0.0, 0.0); // 透明\n        }\n        \n        return output;\n      }\n      \n      @fragment\n      fn fragmentMain(input: VertexOutput) -> @location(0) vec4f {\n        return input.color;\n      }\n    `\n  });\n\n  // 線分の頂点バッファレイアウト\n  const lineVertexBufferLayout = {\n    arrayStride: 8,\n    attributes: [{\n      format: \"float32x2\",\n      offset: 0,\n      shaderLocation: 0,\n    }],\n  };\n\n  // 線分の頂点データ（単純な2点を定義するだけでOK）\n  const lineVertices = new Float32Array([\n    0, 0,  // 開始点（シェーダー内で実際の位置に置き換え）\n    0, 0   // 終了点（シェーダー内で実際の位置に置き換え）\n  ]);\n\n  // 線分の頂点バッファ\n  const lineVertexBuffer = device.createBuffer({\n    label: \"Line vertices\",\n    size: lineVertices.byteLength,\n    usage: GPUBufferUsage.VERTEX | GPUBufferUsage.COPY_DST,\n  });\n  device.queue.writeBuffer(lineVertexBuffer, 0, lineVertices);\n\n  // 線分用のバインドグループを作成\n  const lineBindGroup = device.createBindGroup({\n    label: \"Line renderer bind group\",\n    layout: renderBindGroupLayout,\n    entries: [\n      {\n        binding: 0,\n        resource: {\n          buffer: line_output\n        }\n      },\n      {\n        binding: 1,\n        resource: {\n          buffer: scene,\n        },\n      },\n    ],\n  });\n\n  // 線分用のパイプラインを作成\n  const linePipeline = device.createRenderPipeline({\n  label: \"Line pipeline\",\n  layout: renderPipelineLayout, // 同じレイアウトを使用可能\n  vertex: {\n    module: lineShaderModule, // 線分用のシェーダーモジュール\n    entryPoint: \"vertexMain\",\n    buffers: [lineVertexBufferLayout]\n  },\n  fragment: {\n    module: lineShaderModule, \n    entryPoint: \"fragmentMain\",\n    targets: [{ format: canvasFormat }]\n  },\n  primitive: {\n    topology: \"line-list\", // ここで線分として描画指定\n    stripIndexFormat: undefined\n  }\n  });\n\n  // END 線分要素の描画関係\n\n  // END Geometry Shader\n\n  // 計算を更新する関数\n  function updateCompute(commandEncoder) {\n    const dispatchSize = Math.ceil(NUM_BALLS / 64);\n    const computePassEncoder = commandEncoder.beginComputePass(); // 「これから計算処理の指示を記録します」という宣言\n    computePassEncoder.setPipeline(pipeline); // どのシェーダープログラムを実行するかを指定\n    computePassEncoder.setBindGroup(0, bindGroup1); // シェーダーが使用するデータリソースを指定(粒子)\n    computePassEncoder.setBindGroup(1, bindGroup2); // シェーダーが使用するデータリソースを指定(線分)\n    computePassEncoder.dispatchWorkgroups(dispatchSize); // 「ワークグループ」と呼ばれる計算ユニットをいくつ起動するかを指定\n    computePassEncoder.end(); // 「計算処理の指示はここまでです」という宣言\n    return commandEncoder;\n  }\n\n  // レンダリングを更新する関数\n  function updateRender(commandEncoder) {\n    const renderPassDescriptor = {\n      colorAttachments: [{\n        view: ctx.getCurrentTexture().createView(),\n        loadOp: \"clear\",\n        clearValue: { r: 0, g: 0, b: 0.4, a: 1 },\n        storeOp: \"store\",\n      }],\n    };\n    const renderPassEncoder = commandEncoder.beginRenderPass(renderPassDescriptor);\n    // 粒子を描画\n    renderPassEncoder.setPipeline(cellPipeline);\n    renderPassEncoder.setVertexBuffer(0, vertexBuffer);\n    renderPassEncoder.setBindGroup(0, renderBindGroup);\n    renderPassEncoder.draw(vertices.length / 2, NUM_BALLS);\n\n\n    // 次に線分を描画\n    renderPassEncoder.setPipeline(linePipeline);\n    renderPassEncoder.setVertexBuffer(0, lineVertexBuffer);\n    renderPassEncoder.setBindGroup(0, lineBindGroup);\n    renderPassEncoder.draw(lineVertices.length / 2); // インスタンス描画なしの例\n\n\n    renderPassEncoder.end();\n    return commandEncoder;\n  }\n\n\n  // ページ初回ロード時\n  initializeState();\n\n\n  // 初期化の処理\n  function initializeState() {\n\n    // シーン用バッファを再設定し、再描画を行う\n    device.queue.writeBuffer(scene, 0, initializeSceneBuffer());\n\n    // 初期化用のバッファデータの粒子要素の配列\n    device.queue.writeBuffer(input, 0, initializeInputBallsBuffer());\n\n    // 初期化用のバッファデータの線分要素の配列\n    device.queue.writeBuffer(line_input, 0, initializeInputLinesBuffer());\n    device.queue.writeBuffer(line_output, 0, initializeInputLinesBuffer());\n\n    // 初期化用のバッファデータの接触力の配列\n    let ef_inputBalls = new Float32Array(new ArrayBuffer(EF_BUFFER_SIZE));\n    device.queue.writeBuffer(ef_input, 0, ef_inputBalls);\n    // 初期化用のバッファデータの接触力の相手粒子の配列\n    let ef_index_inputBalls = new Uint32Array(new ArrayBuffer(EF_INDEX_BUFFER_SIZE));\n    device.queue.writeBuffer(ef_index_input, 0, ef_index_inputBalls);\n    // 初期化用のバッファデータの接触相手粒子の配列\n    let gl_inputBalls = new Uint32Array(new ArrayBuffer(GL_BUFFER_SIZE));\n    device.queue.writeBuffer(gl_input, 0, gl_inputBalls);\n    // 初期化用のバッファデータの接触相手の粒子数の配列\n    let gl_input_atomic = new Uint32Array(new ArrayBuffer(GL_ATOMIC_BUFFER_SIZE));\n    device.queue.writeBuffer(gl_atomic, 0, gl_input_atomic);\n\n    // GPUコマンドの作成\n    let commandEncoder = device.createCommandEncoder();\n    // 一度計算する\n    commandEncoder = updateCompute(commandEncoder);\n    // バッファのコピー\n\n    commandEncoder.copyBufferToBuffer(output, 0, input, 0, BUFFER_SIZE);\n    commandEncoder.copyBufferToBuffer(gl_output, 0, gl_input, 0, GL_BUFFER_SIZE);\n\n\n    // レンダリングを実行\n    commandEncoder = updateRender(commandEncoder);\n\n    device.queue.submit([commandEncoder.finish()]); // commandEncoder.finish()でコマンドリストを完成させ、device.queue.submit()でGPUに送信することで、実際の処理が行われる\n\n  }\n\n\n\n  // overlay 用キャンバス・コンテキスト(計算時間を表示するために追加)\n  const overlayCtx = overlayCanvas.getContext(\"2d\");\n  overlayCanvas.width = width; // キャンバスの幅(px)\n  overlayCanvas.height = height; // キャンバスの高さ(px)\n  overlayCanvas.style.width = width + 'px';\n  overlayCanvas.style.height = height + 'px';\n  // オーバーレイキャンバスでテキスト描画する関数\n  function drawFPS(timeInSec, unit) {\n    overlayCtx.clearRect(0, 0, overlayCanvas.width, overlayCanvas.height);\n    // フォントサイズを設定（固定サイズを維持）\n    const fontSize = 24;\n    overlayCtx.font = `${fontSize}px serif`;\n    overlayCtx.fillStyle = \"white\";\n    const text = timeInSec.toFixed(2) + \" \" + unit;\n    // テキストの横幅を測定\n    const textWidth = overlayCtx.measureText(text).width;\n    // 右上に配置（右端から20px、上端から20px離す）\n    const x = overlayCanvas.width - textWidth - 40;\n    const y = fontSize + 20; // フォントサイズ + 余白\n    // テキスト描画\n    overlayCtx.fillText(text, x, y);\n  }\n\n  // カラーモードの変更時に実行される関数\n  function changeColorMode(mode) {\n    switch(mode){\n      case \"id\":\n        colorMode = 0;\n        break;\n      case \"vabs\":\n        colorMode = 1;\n        break;\n    }\n\n    // 再レンダリング\n    updateZoom();\n  }\n\n  // ラジオボタン要素のイベントの追加\n  modeRadioId.addEventListener(\"change\", () => changeColorMode(\"id\"));\n  modeRadioVabs.addEventListener(\"change\", () => changeColorMode(\"vabs\"));\n  \n\n\n  // マウスのドラッグ関係\n  // マウス押下時の処理\n  canvas.addEventListener(\"mousedown\", (event) => {\n    isDragging = true;\n    canvas.style.cursor = \"grabbing\"; // ドラッグ時のカーソル\n    const rect = canvas.getBoundingClientRect();\n    lastMouseX = event.clientX - rect.left;\n    lastMouseY = event.clientY - rect.top;\n  });\n  // マウス移動時の処理\n  canvas.addEventListener(\"mousemove\", (event) => {\n    // ドラッグしてなければ抜ける\n    if (!isDragging) return;\n    const rect = canvas.getBoundingClientRect();\n    const mouseX = event.clientX - rect.left;\n    const mouseY = event.clientY - rect.top;\n  \n    const dx = mouseX - lastMouseX;\n    const dy = mouseY - lastMouseY;\n  \n    // zoomしても移動量は一定にする\n    offsetX -= dx/zoomValue;\n    // Canvas は上が0で下に行くほど大きくなる。WebGPUでは下端が-1,上端が1なので符号を反転\n    offsetY += dy/zoomValue;\n  \n    lastMouseX = mouseX;\n    lastMouseY = mouseY;\n    // レンダリングを更新\n    updateZoom();\n  });\n  \n  canvas.addEventListener(\"mouseup\", () => {\n    isDragging = false;\n    canvas.style.cursor = \"grab\"; // カーソルを元に戻す\n  });\n  // END マウスのドラッグ関係\n\n  // マウスのズーム関係\n  canvas.addEventListener(\"wheel\", (event) => {\n    event.preventDefault();\n    // キャンバス上のマウス座標を取得\n    const rect = canvas.getBoundingClientRect();\n    const mouseX = event.clientX - rect.left;\n    const mouseY = event.clientY - rect.top;\n\n    const oldZoom = zoomValue;\n    const zoomFactor = 1.1; // ズームの強さ\n    if (event.deltaY < 0) {\n      zoomValue *= zoomFactor;\n    } else {\n      zoomValue /= zoomFactor;\n    }\n    zoomValue = Math.max(0.1, Math.min(zoomValue, 12)); // ズーム範囲の制限\n\n    // マウス座標を基準にカメラ中心を調整し、ピボット拡大縮小\n    const ratio = zoomValue / oldZoom;\n\n    // ピボットズーム計算：マウス位置を固定点として、centerXとcenterYを調整\n    offsetX = mouseX - 1/ratio * (mouseX - offsetX);\n    offsetY = (ctx.canvas.height-mouseY) - 1/ratio * ((ctx.canvas.height-mouseY) - offsetY);\n    updateZoom();\n  });\n\n  // ズーム更新関数\n  function updateZoom() {\n    // シーン用バッファを再設定し、再描画を行う\n    device.queue.writeBuffer(scene, 0, initializeSceneBuffer());\n\n    // レンダリングを実行\n    let commandEncoder = device.createCommandEncoder();\n\n    commandEncoder = updateRender(commandEncoder);\n    const commands = commandEncoder.finish();\n    device.queue.submit([commands]);\n  }\n  // END マウスのズーム関係\n\n\n\n  // 線分表示チェックボックスの制御\n  enableLineCheckbox.addEventListener(\"change\", () => {\n    // チェックボックスの状態に応じて線分の有効/無効を切り替え   \n    // 更新した値をGPUバッファに反映\n    // 両方のバッファを更新\n    device.queue.writeBuffer(line_input, 0, initializeInputLinesBuffer());\n    device.queue.writeBuffer(line_output, 0, initializeInputLinesBuffer()); // line_outputも更新する\n    // レンダリングの更新\n    updateZoom();\n  });\n  // END 線分表示チェックボックスの制御\n\n\n\n  let counter = 0;\n  let timerId = undefined;\n  const UPDATE_INTERVAL = 1/fps*1000; //16.70 * 2; // Update every 16.7*2ms (30fps)\n  // メインループ\n  async function updateGrid() {\n\n\n    // 処理開始時間を記録\n    const start = performance.now();\n\n    // cpu側でループする\n    // const dispatchSize = Math.ceil(NUM_BALLS / 64);\n    let commandEncoder = device.createCommandEncoder();\n    for (let i = 0; i < 400; i++) {\n      commandEncoder.clearBuffer(gl_atomic); // 初期化\n      commandEncoder.clearBuffer(gl_output); // 初期化\n      // 計算更新\n      commandEncoder = updateCompute(commandEncoder);\n      commandEncoder.copyBufferToBuffer(output, 0, input, 0, BUFFER_SIZE); // 粒子要素コピー\n      commandEncoder.copyBufferToBuffer(gl_output, 0, gl_input, 0, GL_BUFFER_SIZE); // 粒子のインデックス配列をコピー\n\n    }\n    // END cpu側でループする場合\n\n    // レンダリング更新\n    commandEncoder = updateRender(commandEncoder);\n\n    const commands = commandEncoder.finish();\n\n    device.queue.submit([commands]);\n\n\n    // 処理終了時間を記録\n    const end = performance.now();\n    // 計算時間を表示(s)\n    drawFPS(counter * UPDATE_INTERVAL / 1000, \"s\");\n    counter++;\n  }\n  // END メインループ\n\n  // スタート処理\n  function start() {\n    // シミュレーションリセット\n    if(timerId === undefined){\n      // シミュレーション開始\n      timerId = setInterval(updateGrid, UPDATE_INTERVAL);\n    }else{\n      console.log('すでにスタートしています。')\n    }\n  }\n\n  // Start ボタンのイベントリスナーを追加\n  startButton.addEventListener(\"click\", start, false);\n\n\n  // ストップ処理\n  function stopSimulation() {\n    if (timerId !== undefined) {\n      clearInterval(timerId);\n      timerId = undefined;\n    }\n    console.log(\"Simulation stopped.\");\n  }\n\n  // Stop ボタンのイベントリスナーを追加\n  stopButton.addEventListener(\"click\", stopSimulation, false);\n\n  // シミュレーションリセット処理\n  function resetSimulation() {\n    // タイマーが動作中なら停止\n    if (timerId !== undefined) {\n      clearInterval(timerId);\n      timerId = undefined;\n    }\n\n    // シミュレーションカウンタのリセット\n    counter = 0;\n    drawFPS(counter * UPDATE_INTERVAL / 1000, \"s\");\n\n    initializeState();\n\n    console.log(\"Simulation reset complete.\");\n  }\n  // Reset ボタンのイベントリスナーを追加\n  resetButton.addEventListener(\"click\", resetSimulation, false);\n\n  // リセット押下時の処理\n  function resetView() {\n    // 各パラメータを初期化\n    isDragging = false;\n    lastMouseX = 0;\n    lastMouseY = 0;\n    zoomValue = 1.0;\n    offsetX = 0;\n    offsetY = 0;\n    // 更新\n    updateZoom();\n  }\n\n  // restart ボタンのイベントリスナーを追加\n  resetViewButton.addEventListener(\"click\", resetView, false);\n\n  // aとbの間のランダムな数を計算する関数\n  function random(a, b) {\n    return Math.random() * (b - a) + a;\n  }\n\n  // クランプ関数\n  function clamp(value, min, max) {\n    return Math.min(Math.max(value, min), max);\n  }\n  \n})();","var OVERLAY_ID = '__parcel__error__overlay__';\n\nvar OldModule = module.bundle.Module;\n\nfunction Module(moduleName) {\n  OldModule.call(this, moduleName);\n  this.hot = {\n    data: module.bundle.hotData,\n    _acceptCallbacks: [],\n    _disposeCallbacks: [],\n    accept: function (fn) {\n      this._acceptCallbacks.push(fn || function () {});\n    },\n    dispose: function (fn) {\n      this._disposeCallbacks.push(fn);\n    }\n  };\n\n  module.bundle.hotData = null;\n}\n\nmodule.bundle.Module = Module;\nvar checkedAssets, assetsToAccept;\n\nvar parent = module.bundle.parent;\nif ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {\n  var hostname = process.env.HMR_HOSTNAME || location.hostname;\n  var protocol = location.protocol === 'https:' ? 'wss' : 'ws';\n  var ws = new WebSocket(protocol + '://' + hostname + ':' + process.env.HMR_PORT + '/');\n  ws.onmessage = function(event) {\n    checkedAssets = {};\n    assetsToAccept = [];\n\n    var data = JSON.parse(event.data);\n\n    if (data.type === 'update') {\n      var handled = false;\n      data.assets.forEach(function(asset) {\n        if (!asset.isNew) {\n          var didAccept = hmrAcceptCheck(global.parcelRequire, asset.id);\n          if (didAccept) {\n            handled = true;\n          }\n        }\n      });\n\n      // Enable HMR for CSS by default.\n      handled = handled || data.assets.every(function(asset) {\n        return asset.type === 'css' && asset.generated.js;\n      });\n\n      if (handled) {\n        console.clear();\n\n        data.assets.forEach(function (asset) {\n          hmrApply(global.parcelRequire, asset);\n        });\n\n        assetsToAccept.forEach(function (v) {\n          hmrAcceptRun(v[0], v[1]);\n        });\n      } else if (location.reload) { // `location` global exists in a web worker context but lacks `.reload()` function.\n        location.reload();\n      }\n    }\n\n    if (data.type === 'reload') {\n      ws.close();\n      ws.onclose = function () {\n        location.reload();\n      }\n    }\n\n    if (data.type === 'error-resolved') {\n      console.log('[parcel] ✨ Error resolved');\n\n      removeErrorOverlay();\n    }\n\n    if (data.type === 'error') {\n      console.error('[parcel] 🚨  ' + data.error.message + '\\n' + data.error.stack);\n\n      removeErrorOverlay();\n\n      var overlay = createErrorOverlay(data);\n      document.body.appendChild(overlay);\n    }\n  };\n}\n\nfunction removeErrorOverlay() {\n  var overlay = document.getElementById(OVERLAY_ID);\n  if (overlay) {\n    overlay.remove();\n  }\n}\n\nfunction createErrorOverlay(data) {\n  var overlay = document.createElement('div');\n  overlay.id = OVERLAY_ID;\n\n  // html encode message and stack trace\n  var message = document.createElement('div');\n  var stackTrace = document.createElement('pre');\n  message.innerText = data.error.message;\n  stackTrace.innerText = data.error.stack;\n\n  overlay.innerHTML = (\n    '<div style=\"background: black; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; opacity: 0.85; font-family: Menlo, Consolas, monospace; z-index: 9999;\">' +\n      '<span style=\"background: red; padding: 2px 4px; border-radius: 2px;\">ERROR</span>' +\n      '<span style=\"top: 2px; margin-left: 5px; position: relative;\">🚨</span>' +\n      '<div style=\"font-size: 18px; font-weight: bold; margin-top: 20px;\">' + message.innerHTML + '</div>' +\n      '<pre>' + stackTrace.innerHTML + '</pre>' +\n    '</div>'\n  );\n\n  return overlay;\n\n}\n\nfunction getParents(bundle, id) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return [];\n  }\n\n  var parents = [];\n  var k, d, dep;\n\n  for (k in modules) {\n    for (d in modules[k][1]) {\n      dep = modules[k][1][d];\n      if (dep === id || (Array.isArray(dep) && dep[dep.length - 1] === id)) {\n        parents.push(k);\n      }\n    }\n  }\n\n  if (bundle.parent) {\n    parents = parents.concat(getParents(bundle.parent, id));\n  }\n\n  return parents;\n}\n\nfunction hmrApply(bundle, asset) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n\n  if (modules[asset.id] || !bundle.parent) {\n    var fn = new Function('require', 'module', 'exports', asset.generated.js);\n    asset.isNew = !modules[asset.id];\n    modules[asset.id] = [fn, asset.deps];\n  } else if (bundle.parent) {\n    hmrApply(bundle.parent, asset);\n  }\n}\n\nfunction hmrAcceptCheck(bundle, id) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n\n  if (!modules[id] && bundle.parent) {\n    return hmrAcceptCheck(bundle.parent, id);\n  }\n\n  if (checkedAssets[id]) {\n    return;\n  }\n  checkedAssets[id] = true;\n\n  var cached = bundle.cache[id];\n\n  assetsToAccept.push([bundle, id]);\n\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n    return true;\n  }\n\n  return getParents(global.parcelRequire, id).some(function (id) {\n    return hmrAcceptCheck(global.parcelRequire, id)\n  });\n}\n\nfunction hmrAcceptRun(bundle, id) {\n  var cached = bundle.cache[id];\n  bundle.hotData = {};\n  if (cached) {\n    cached.hot.data = bundle.hotData;\n  }\n\n  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {\n    cached.hot._disposeCallbacks.forEach(function (cb) {\n      cb(bundle.hotData);\n    });\n  }\n\n  delete bundle.cache[id];\n  bundle(id);\n\n  cached = bundle.cache[id];\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n    cached.hot._acceptCallbacks.forEach(function (cb) {\n      cb();\n    });\n    return true;\n  }\n}\n"]}